<Grid x:Class="SLC_LayoutEditor.UI.LayoutEditor"
           xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
           xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
           xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
           xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
           xmlns:vm="clr-namespace:SLC_LayoutEditor.ViewModel"
           xmlns:controls="clr-namespace:SLC_LayoutEditor.Controls"
           xmlns:enum="clr-namespace:SLC_LayoutEditor.Core.Enum"
           xmlns:converter="clr-namespace:SLC_LayoutEditor.Converter"
           xmlns:local="clr-namespace:SLC_LayoutEditor.UI"
           mc:Ignorable="d" 
           d:DesignHeight="650" d:DesignWidth="800">
    <Grid.DataContext>
        <vm:LayoutEditorViewModel/>
    </Grid.DataContext>
    <Grid.Resources>
        <converter:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
        <converter:NotNullToVisibilityConverter x:Key="NotNullToVisibilityConverter"/>
        <converter:NotNullToBooleanConverter x:Key="NotNullToBooleanConverter"/>
        <converter:GreaterThanConverter x:Key="GreaterThanConverter"/>
        <converter:EqualsToVisibilityConverter x:Key="EqualsToVisibilityConverter"/>
        <converter:StringNotEmptyConverter x:Key="StringNotEmptyConverter"/>
    </Grid.Resources>
    <DockPanel>
        <DockPanel.Style>
            <Style TargetType="DockPanel">
                <Setter Property="Effect" Value="{x:Null}"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsDialogOpen}" Value="True">
                        <Setter Property="Effect" Value="{StaticResource DisableBlur}"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </DockPanel.Style>
        <DockPanel Width="340" Margin="8" LastChildFill="False">
            <TextBlock Text="Airplane" Style="{StaticResource Title3TextStyle}" DockPanel.Dock="Top" Margin="2,0"/>
            <DockPanel DockPanel.Dock="Top">
                <Button DockPanel.Dock="Right" Width="22" Height="22" ToolTip="Add new airplane"
                    Click="AddAirplane_Click" Style="{StaticResource BorderedIconButton}" Content="{StaticResource Add}">
                </Button>
                <ComboBox x:Name="combo_layoutSets" Margin="4" ItemsSource="{Binding LayoutSets}"
                          SelectedItem="{Binding SelectedLayoutSet}"/>
            </DockPanel>
            <TextBlock Text="Cabin layout" Style="{StaticResource Title3TextStyle}" DockPanel.Dock="Top" Margin="2,12,2,0"/>
            <ProgressBar DockPanel.Dock="Top" IsIndeterminate="True"
                     Margin="4,0" Visibility="{Binding SelectedLayoutSet.IsLoadingLayouts, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}"/>
            <DockPanel DockPanel.Dock="Top" IsEnabled="{Binding IsAddCabinLayoutButtonEnabled}">
                <Button DockPanel.Dock="Right" Width="22" Height="22" ToolTip="Add new layout" Content="{StaticResource Add}"
                    Click="AddCabinLayout_Click" Style="{StaticResource BorderedIconButton}"/>
                <ComboBox x:Name="combo_layouts" Margin="4" ItemsSource="{Binding SelectedLayoutSet.CabinLayouts, UpdateSourceTrigger=PropertyChanged}"
                          SelectedItem="{Binding SelectedCabinLayout}">
                    <ComboBox.Style>
                        <Style TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
                            <Setter Property="IsEnabled" Value="False"/>
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding SelectedLayoutSet, Converter={StaticResource NotNullToBooleanConverter}}"
                                           Value="True"/>
                                        <Condition Binding="{Binding SelectedLayoutSet.IsLoadingLayouts}" Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="IsEnabled" Value="True"/>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ComboBox.Style>
                </ComboBox>
            </DockPanel>
            <Button DockPanel.Dock="Bottom" Margin="8,0" Content="Save layout" Click="SaveLayout_Click"
                    IsEnabled="{Binding SelectedCabinLayout, Converter={StaticResource NotNullToBooleanConverter}}"/>
            <Border DockPanel.Dock="Bottom" Background="{DynamicResource BackgroundDarkBrush}" Padding="4" Margin="8"
                    BorderBrush="{DynamicResource BackgroundLightBrush}" BorderThickness="1.5" CornerRadius="4"
                    Visibility="{Binding SelectedCabinLayout, Converter={StaticResource NotNullToVisibilityConverter}}">
                <StackPanel DockPanel.Dock="Bottom">
                    <UniformGrid Columns="5">
                        <controls:SeatCapacityBox Margin="4" SeatTypeLetter="SUPER"
                                          Capacity="{Binding SelectedCabinLayout.SupersonicCapacity}"
                                          BoxBackground="{StaticResource SupersonicClassColorBrush}"
                                          ToolTip="Super class"/>
                        <controls:SeatCapacityBox Margin="4" SeatTypeLetter="FIRST"
                                          Capacity="{Binding SelectedCabinLayout.FirstClassCapacity}"
                                          BoxBackground="{StaticResource FirstClassColorBrush}"
                                          ToolTip="First class"/>
                        <controls:SeatCapacityBox Margin="4" SeatTypeLetter="BZ"
                                          Capacity="{Binding SelectedCabinLayout.BusinessCapacity}"
                                          BoxBackground="{StaticResource BusinessClassColorBrush}"
                                          ToolTip="Business class"/>
                        <controls:SeatCapacityBox Margin="4" SeatTypeLetter="PREM"
                                          Capacity="{Binding SelectedCabinLayout.PremiumCapacity}"
                                          BoxBackground="{StaticResource PremiumClassColorBrush}"
                                          ToolTip="Premium class"/>
                        <controls:SeatCapacityBox Margin="4" SeatTypeLetter="ECO"
                                          Capacity="{Binding SelectedCabinLayout.EconomyCapacity}"
                                          BoxBackground="{StaticResource EconomyClassColorBrush}"
                                          ToolTip="Economy class"/>
                    </UniformGrid>
                    <TextBlock Margin="4" Style="{StaticResource Title2TextStyle}" HorizontalAlignment="Center"
                               FontSize="24"
                           Text="{Binding SelectedCabinLayout.PassengerCapacity, StringFormat={}Total: {0}, FallbackValue=Total: 0}"/>
                </StackPanel>
            </Border>
            <controls:RefinedExpander DockPanel.Dock="Top" Margin="0,16,0,8" IsEnabled="{Binding SelectedCabinLayout, Converter={StaticResource NotNullToBooleanConverter}}"
                                      Description="{Binding SelectedCabinLayout.IssuesCountText}">
                <controls:RefinedExpander.Style>
                    <Style TargetType="controls:RefinedExpander" BasedOn="{StaticResource {x:Type controls:RefinedExpander}}">
                        <Setter Property="DescriptionForeground" Value="{DynamicResource ButtonBorderColorBrush}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding SelectedCabinLayout.HasMinorIssues}" Value="True">
                                <Setter Property="DescriptionForeground" Value="{DynamicResource WarnForegroundColorBrush}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding SelectedCabinLayout.HasSevereIssues}" Value="True">
                                <Setter Property="DescriptionForeground" Value="{DynamicResource ErrorForegroundColorBrush}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </controls:RefinedExpander.Style>
                <Expander.Header>
                    <TextBlock FontSize="16" Text="Issues" FontWeight="Bold">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock" BasedOn="{StaticResource DefaultTextStyle}">
                                <Style.Triggers>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Foreground" Value="{DynamicResource DisabledColorBrush}"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </Expander.Header>
                <ScrollViewer VerticalScrollBarVisibility="Visible" Margin="0,4" x:Name="list_scroll">
                    <StackPanel Margin="4">
                        <TextBlock Text="Issues across all decks" FontSize="18" Style="{StaticResource DefaultTextStyle}"/>
                        <TextBlock Visibility="Collapsed">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock" BasedOn="{StaticResource LayoutProblemTextStyle}">
                                    <Setter Property="Text" Value="No duplicate doors"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding SelectedCabinLayout.HasNoDuplicateDoors, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                            <Setter Property="Text" Value="Duplicate doors found!"/>
                                            <Setter Property="Foreground" Value="{StaticResource ErrorForegroundColorBrush}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                        <controls:LayoutProblemText ValidText="No duplicate Economy Class seats"
                                                    InvalidText="Duplicate Economy Class seats found!"
                                                    IsValid="{Binding SelectedCabinLayout.HasNoDuplicateEconomySeats}"
                                                    InvalidSlots="{Binding SelectedCabinLayout.DuplicateEconomySeats}"
                                                    ShowEye="True" ShowProblemsChanged="EconomyClass_ShowProblemsChanged"
                                                    ShowProblems="{Binding ShowEconomyClassIssues}"/>
                        <controls:LayoutProblemText ValidText="No duplicate Business Class seats"
                                                    InvalidText="Duplicate Business Class seats found!"
                                                    IsValid="{Binding SelectedCabinLayout.HasNoDuplicateBusinessSeats}"
                                                    InvalidSlots="{Binding SelectedCabinLayout.DuplicateBusinessSeats}"
                                                    ShowEye="True" ShowProblemsChanged="BusinessClass_ShowProblemsChanged"
                                                    ShowProblems="{Binding ShowBusinessClassProblems, UpdateSourceTrigger=PropertyChanged}"/>
                        <controls:LayoutProblemText ValidText="No duplicate Premium Class seats"
                                                    InvalidText="Duplicate Premium Class seats found!"
                                                    IsValid="{Binding SelectedCabinLayout.HasNoDuplicatePremiumSeats}"
                                                    InvalidSlots="{Binding SelectedCabinLayout.DuplicatePremiumSeats}"
                                                    ShowEye="True" ShowProblemsChanged="Premium_ShowProblemsChanged"
                                                    ShowProblems="{Binding ShowPremiumClassIssues}"/>
                        <controls:LayoutProblemText ValidText="No duplicate First Class seats"
                                                    InvalidText="Duplicate First Class seats found!"
                                                    IsValid="{Binding SelectedCabinLayout.HasNoDuplicateFirstClassSeats}"
                                                    InvalidSlots="{Binding SelectedCabinLayout.DuplicateFirstClassSeats}"
                                                    ShowEye="True" ShowProblemsChanged="FirstClass_ShowProblemsChanged"
                                                    ShowProblems="{Binding ShowFirstClassIssues}"/>
                        <controls:LayoutProblemText ValidText="No duplicate Supersonic Class seats"
                                                    InvalidText="Duplicate Supersonic Class seats found!"
                                                    IsValid="{Binding SelectedCabinLayout.HasNoDuplicateSupersonicSeats}"
                                                    InvalidSlots="{Binding SelectedCabinLayout.DuplicateSupersonicSeats}"
                                                    ShowEye="True" ShowProblemsChanged="SupersonicClass_ShowProblemsChanged"
                                                    ShowProblems="{Binding ShowSupersonicClassIssues}"/>
                        <controls:LayoutProblemText ValidText="No duplicate Unavailable seats"
                                                    InvalidText="Duplicate Unavailable seats found!"
                                                    IsValid="{Binding SelectedCabinLayout.HasNoDuplicateUnavailableSeats}"
                                                    InvalidSlots="{Binding SelectedCabinLayout.DuplicateUnavailableSeats}"
                                                    ShowEye="True" ShowProblemsChanged="UnavailableSeats_ShowProblemsChanged"
                                                    ShowProblems="{Binding ShowUnavailableSeatsIssues}"/>
                        <Separator Margin="0,4"/>
                        <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="No duplicate doors"
                                                    InvalidText="Duplicate doors found!"
                                                    IsValid="{Binding SelectedCabinLayout.HasNoDuplicateDoors}"
                                                    InvalidSlots="{Binding SelectedCabinLayout.DuplicateDoors}"
                                                    ShowEye="True"
                                                    ShowProblemsChanged="DuplicateDoors_ShowProblemsChanged"
                                                    ShowProblems="{Binding SelectedCabinLayout.ShowDuplicateDoorsIssues}"
                                                    AutoFixTarget="{Binding SelectedCabinLayout}"
                                                    ShowAutoFix="True"
                                                    AutoFixApplying="DuplicateDoors_AutoFixApplying"
                                                    Description="Make sure that each door has a unique number across all decks"/>
                        <controls:LayoutProblemText ValidText="Stairway positions valid"
                                                    InvalidText="{Binding StairwayErrorMessage}"
                                                    IsValid="{Binding SelectedCabinLayout.StairwaysValid}"
                                                    InvalidSlots="{Binding SelectedCabinLayout.InvalidStairways}"
                                                    ShowEye="True" 
                                                    ShowProblemsChanged="StairwayPositions_ShowProblemsChanged"
                                                    ShowProblems="{Binding ShowStairwayIssues}"
                                                    ShowAutoFix="True"
                                                    AutoFixApplying="StairwayPositions_AutoFixApplying"
                                                    AutoFixTarget="{Binding SelectedCabinLayout}"
                                                    Description="When using multiple decks and adding stairways, make sure to align them on the same x/y coordinate"
                                                    NotRequiredText="No stairways required"
                                                    IsRequired="{Binding SelectedCabinLayout.HasMultipleDecks}"/>
                        <TextBlock Text="Issues per deck" FontSize="18" Margin="0,16,0,0" Style="{StaticResource DefaultTextStyle}"/>
                        <DataGrid AutoGenerateColumns="False" Background="Transparent" HeadersVisibility="None"
                              GridLinesVisibility="None" BorderBrush="Transparent" CanUserAddRows="False" 
                              CanUserDeleteRows="False" CanUserReorderColumns="False" CanUserResizeColumns="False"
                              CanUserSortColumns="False" HorizontalScrollBarVisibility="Disabled"
                              ItemsSource="{Binding SelectedCabinLayout.CabinDecks}"
                              PreviewMouseWheel="DeckProblemsList_PreviewMouseWheel"
                                  Margin="8,0,0,0">
                            <DataGrid.Resources>
                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent" />
                                <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent" />
                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Transparent" />
                                <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Transparent" />
                                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="Transparent"/>
                            </DataGrid.Resources>
                            <DataGrid.RowStyle>
                                <Style TargetType="DataGridRow">
                                    <Setter Property="Background" Value="Transparent"/>
                                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                </Style>
                            </DataGrid.RowStyle>
                            <DataGrid.CellStyle>
                                <Style TargetType="DataGridCell">
                                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                    <Setter Property="BorderThickness" Value="0"/>
                                </Style>
                            </DataGrid.CellStyle>
                            <DataGrid.Columns>
                                <DataGridTemplateColumn>
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel Visibility="{Binding CabinSlots, Converter={StaticResource NotNullToVisibilityConverter}}"
                                                       Margin="8,0,0,12" Width="297">
                                                <TextBlock FontSize="16" DockPanel.Dock="Top" Margin="-8,0,0,0"
                                                           Foreground="{DynamicResource ForegroundSecondaryColorBrush}">
                                                    <TextBlock.Style>
                                                        <Style TargetType="TextBlock" BasedOn="{StaticResource DefaultTextStyle}">
                                                            <Setter Property="Text" Value="{Binding Floor, StringFormat={}Floor {0}}"/>
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding Floor}" Value="1">
                                                                    <Setter Property="Text" Value="Lower deck"/>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding Floor}" Value="2">
                                                                    <Setter Property="Text" Value="Upper deck"/>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </TextBlock.Style>
                                                </TextBlock>
                                                <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="Deck slots valid"
                                                                            InvalidText="Invalid amount of deck slots!"
                                                                            IsValid="{Binding AreSlotsValid}"
                                                                            ShowAutoFix="True"
                                                                            AutoFixTarget="{Binding}"
                                                                            AutoFixApplying="Slots_AutoFixApplying"
                                                                            Description="This layout validator checks if your deck has &quot;holes&quot;, i.e. missing tiles"/>
                                                <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="Doors available"
                                                                            InvalidText="No doors for this deck!"
                                                                            IsValid="{Binding AreDoorsValid}"
                                                                            Description="Each deck needs at least one door. Also make sure that each layout has at least one loading bay, catering doors are optional"/>
                                                <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="CAT/LB on correct side"
                                                                            InvalidText="CAT/LB detected on the left side"
                                                                            InvalidSlots="{Binding InvalidCateringDoorsAndLoadingBays}"
                                                                            ShowEye="True" 
                                                                            ShowProblemsChanged="CateringAndLoadingBays_ShowProblemsChanged"
                                                                            ShowProblems="{Binding ShowCateringAndLoadingBayIssues}"
                                                                            IsValid="{Binding AreCateringAndLoadingBaysValid}" IsSevereProblem="False"
                                                                            Description="Catering doors and loading bays should face the right side of the layout (top side in the view)"/>
                                                <Separator Margin="0,4"/>
                                                <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="Service start- and endpoints are valid"
                                                                            InvalidText="Invalid service points!"
                                                                            IsValid="{Binding AreServicePointsValid}"
                                                                            Description="Each service start point (&lt;) also requires an end point (&gt;) in the same row"/>
                                                <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="All seat rows covered by service"
                                                                            InvalidText="Some rows aren't covered by service!"
                                                                            IsValid="{Binding AreSeatsReachableByService}" IsSevereProblem="False"
                                                                            IsRequired="{Binding AreKitchensValid}"
                                                                            NotRequiredText="No service coverage required (no kitchen)"
                                                                            Description="In case you have a kitchen on this deck, make sure to cover all rows with the service start- and endpoints"/>
                                                <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="Valid galley count"
                                                                            InvalidText="Insufficient galley seats for servicing!"
                                                                            IsValid="{Binding AreGalleysValid}"
                                                                            Description="Make sure to have at least as many galley seats on this deck as there are service areas (denoted by &lt; and &gt;)"/>
                                                <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="Kitchen accessible (In-Flight services available)"
                                                                            InvalidText="No kitchen available! (No In-Flight services)"
                                                                            IsValid="{Binding AreKitchensValid}" IsSevereProblem="False"
                                                                            Description="If you wanna be able to offer in-flight services, make sure to place down a kitchen"/>
                                                <Separator Margin="0,4"/>
                                                <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="Toilets available"
                                                                            InvalidText="No toilets on this deck!"
                                                                            IsValid="{Binding AreToiletsAvailable}" IsSevereProblem="False"
                                                                            Description="In order to satisfy the needs of your passengers, one or more toilets are required"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                            </DataGrid.Columns>
                        </DataGrid>
                    </StackPanel>
                </ScrollViewer>
            </controls:RefinedExpander>
        </DockPanel>
        <Border Width="1" Background="{StaticResource DisabledColorBrush}"/>
        <Grid>
            <DockPanel Margin="8" IsEnabled="{Binding SelectedCabinLayout, Converter={StaticResource NotNullToBooleanConverter}}">
                <DockPanel.Style>
                    <Style TargetType="DockPanel">
                        <Setter Property="Effect" Value="{x:Null}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsLayoutLoading}" Value="True">
                                <Setter Property="Effect" Value="{StaticResource DisableBlur}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </DockPanel.Style>
                <StackPanel DockPanel.Dock="Bottom"
                        Visibility="{Binding IsSingleCabinSlotSelected, Converter={StaticResource InverseBooleanToVisibilityConverter}}">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock FontSize="16" Style="{StaticResource DefaultTextStyle}">
                                <Run Text="{Binding SelectedCabinSlotFloor, StringFormat={}Multi-slot configuration (Floor {0})}"/>
                        </TextBlock>
                    </StackPanel>
                    <UniformGrid Rows="1">
                        <!--<UniformGrid.Style>
                        <Style TargetType="UniformGrid">
                            <Setter Property="Columns" Value="3"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding SelectedAutomationIndex}" Value="0">
                                    <Setter Property="Columns" Value="4"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </UniformGrid.Style>-->
                        <StackPanel Margin="4">
                            <TextBlock Text="Slot type" Margin="0,0,0,4" Style="{StaticResource DefaultTextStyle}"/>
                            <ComboBox ItemsSource="{Binding Source={enum:EnumBindingSource {x:Type enum:CabinSlotType}}}"
                                  SelectedIndex="{Binding SelectedMultiSlotTypeIndex}"
                                  SelectionChanged="MultiSelect_SlotTypeSelectionChanged"/>
                        </StackPanel>
                        <StackPanel Margin="4">
                            <TextBlock Text="Automation" Margin="0,0,0,4" Style="{StaticResource DefaultTextStyle}"/>
                            <ComboBox SelectedIndex="{Binding SelectedAutomationIndex}">
                                <ComboBoxItem Content="Seat numeration" ToolTip="Sets numeration and letters automatically for you"/>
                                <ComboBoxItem Content="Auto walls" ToolTip="Automatically sets walls around your layout"/>
                                <ComboBoxItem Content="Service points" Visibility="Collapsed"/>
                            </ComboBox>
                        </StackPanel>
                        <StackPanel Margin="4" ToolTip="When modifying multiple rows, split letters with ,"
                                Visibility="{Binding SelectedAutomationIndex, Converter={StaticResource EqualsToVisibilityConverter}, ConverterParameter=0}">
                            <TextBlock Margin="0,0,0,4" Text="Seat letter(s)" Style="{StaticResource DefaultTextStyle}"/>
                            <TextBox Text="{Binding AutomationSeatLetters, UpdateSourceTrigger=PropertyChanged}"/>
                        </StackPanel>
                        <StackPanel Margin="4" ToolTip="With which number should the automation start when numbering seats"
                                Visibility="{Binding SelectedAutomationIndex, Converter={StaticResource EqualsToVisibilityConverter}, ConverterParameter=0}">
                            <TextBlock Margin="0,0,0,4" Text="Starting number" Style="{StaticResource DefaultTextStyle}"/>
                            <TextBox Text="{Binding AutomationSeatStartNumber, UpdateSourceTrigger=PropertyChanged}"/>
                        </StackPanel>
                        <StackPanel Margin="4"
                                Visibility="{Binding SelectedAutomationIndex, Converter={StaticResource EqualsToVisibilityConverter}, ConverterParameter=2}">
                            <TextBlock Margin="0,0,0,4" Text="Service area count" Style="{StaticResource DefaultTextStyle}"/>
                            <TextBox Text="{Binding ServiceAreasCount, UpdateSourceTrigger=PropertyChanged}"/>
                        </StackPanel>
                        <Button Margin="4" Content="Automate" Click="Automate_Click">
                            <Button.Style>
                                <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding SelectedAutomationIndex}" Value="-1">
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding SelectedAutomationIndex}" Value="0"/>
                                                <Condition Binding="{Binding AutomationLettersValid}"
                                                       Value="False">
                                                </Condition>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                    </UniformGrid>
                </StackPanel>
                <StackPanel DockPanel.Dock="Bottom" Visibility="{Binding IsSingleCabinSlotSelected, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Single slot configuration " Style="{StaticResource Title3TextStyle}"/>
                        <TextBlock Visibility="{Binding SelectedCabinSlot, Converter={StaticResource NotNullToVisibilityConverter}}"
                                       Style="{StaticResource Title3TextStyle}">
                                <Run Text="{Binding SelectedCabinSlotFloor, StringFormat={}(Floor {0}}"/><Run Text=","/>
                                <Run Text="{Binding SelectedCabinSlot.Row, StringFormat={}Row {0}}"/><Run Text=","/>
                                <Run Text="{Binding SelectedCabinSlot.Column, StringFormat={}Column {0})}"/>
                        </TextBlock>
                    </StackPanel>
                    <UniformGrid Rows="1">
                        <StackPanel Margin="4">
                            <TextBlock Text="Slot type" Margin="0,0,0,4" Style="{StaticResource DefaultTextStyle}"/>
                            <ComboBox ItemsSource="{Binding Source={enum:EnumBindingSource {x:Type enum:CabinSlotType}}}"
                                  SelectedIndex="{Binding SelectedCabinSlotTypeId}"/>
                        </StackPanel>
                        <StackPanel Margin="4">
                            <DockPanel>
                                <TextBlock DockPanel.Dock="Right"
                                       Visibility="{Binding SelectedCabinSlot.HasSlotNumber, Converter={StaticResource BooleanToVisibilityConverter}}"
                                       Text="{Binding SelectedCabinSlot.MaxSlotNumber, Mode=OneWay, StringFormat={}(max. {0})}"/>
                                <TextBlock Margin="0,0,0,4">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock" BasedOn="{StaticResource DefaultTextStyle}">
                                            <Setter Property="Text" Value="Seat number"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding SelectedCabinSlot.IsDoor, UpdateSourceTrigger=PropertyChanged}" 
                                                             Value="True">
                                                    <Setter Property="Text" Value="Door number"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </DockPanel>
                            <TextBox Text="{Binding SelectedCabinSlot.SlotNumber, UpdateSourceTrigger=PropertyChanged}" 
                                 IsEnabled="{Binding SelectedCabinSlot.HasSlotNumber, UpdateSourceTrigger=PropertyChanged, FallbackValue=False, TargetNullValue=False}"/>
                        </StackPanel>
                        <StackPanel Margin="4">
                            <TextBlock Margin="0,0,0,4" Text="Seat letter" Style="{StaticResource DefaultTextStyle}"/>
                            <TextBox Text="{Binding SelectedCabinSlot.SeatLetter, UpdateSourceTrigger=PropertyChanged}" 
                                 IsEnabled="{Binding SelectedCabinSlot.IsSeat, UpdateSourceTrigger=PropertyChanged, FallbackValue=False, TargetNullValue=False}"/>
                        </StackPanel>
                    </UniformGrid>
                </StackPanel>
                <DockPanel IsEnabled="{Binding SelectedCabinLayout, Converter={StaticResource NotNullToBooleanConverter}}">
                    <DockPanel DockPanel.Dock="Top">
                        <Button DockPanel.Dock="Right" Content="Add deck" Padding="8,0" Click="AddCabinDeck_Click"
                            ToolTip="Add a new deck to your layout"/>
                        <Button DockPanel.Dock="Right" Content="Reload from disk" Padding="8,0" Click="ReloadDeck_Click"
                            ToolTip="Force the editor to reload this layout from file. Unsaved changes are lost!"
                            Margin="8,0" Style="{StaticResource YellowButtonStyle}"/>
                        <TextBlock Text="{Binding LayoutOverviewTitle}">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock" BasedOn="{StaticResource Title1TextStyle}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HasUnsavedChanges}" Value="True">
                                            <Setter Property="FontStyle" Value="Italic"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </DockPanel>
                    <ScrollViewer x:Name="deck_scroll" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto"
                              Margin="4,8">
                        <DataGrid AutoGenerateColumns="False" Background="Transparent" HeadersVisibility="None"
                              ItemsSource="{Binding SelectedCabinLayout.CabinDecks}"
                              SelectedItem="{Binding SelectedCabinDeck}"
                              x:Name="layout_decks" GridLinesVisibility="None"
                              VerticalScrollBarVisibility="Hidden" BorderBrush="Transparent" 
                              CanUserAddRows="False" CanUserDeleteRows="False" CanUserReorderColumns="False" 
                              CanUserResizeColumns="False" CanUserSortColumns="False" PreviewMouseWheel="layout_decks_PreviewMouseWheel">
                            <DataGrid.Resources>
                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent" />
                                <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent" />
                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Transparent" />
                                <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Transparent" />
                                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="Transparent"/>
                            </DataGrid.Resources>
                            <DataGrid.RowStyle>
                                <Style TargetType="DataGridRow">
                                    <Setter Property="Background" Value="Transparent"/>
                                    <Style.Triggers>
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter Property="Background" Value="{StaticResource BackdropColorBrush}"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGrid.RowStyle>
                            <DataGrid.Columns>
                                <DataGridTemplateColumn>
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <controls:DeckLayoutControl x:Name="layout" CabinDeck="{Binding}"
                                                                    CabinSlotClicked="layout_CabinSlotClicked"
                                                                    LayoutRegenerated="layout_LayoutRegenerated"
                                                                    RemoveDeckClicked="layout_RemoveDeckClicked"
                                                                    LayoutLoading="layout_LayoutLoading"/>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                            </DataGrid.Columns>
                        </DataGrid>
                    </ScrollViewer>
                </DockPanel>
            </DockPanel>
            <Border Background="{DynamicResource BackdropColorBrush}"
                    Visibility="{Binding IsLoadingLayout, Converter={StaticResource BooleanToVisibilityConverter}}">
                <StackPanel VerticalAlignment="Center" HorizontalAlignment="Stretch" Margin="16">
                    <TextBlock Style="{StaticResource Title1TextStyle}" HorizontalAlignment="Center">
                        <Run Text="Loading cabin layout &quot;"/><Run Text="{Binding SelectedCabinLayout.LayoutName}"/><Run Text="&quot;"/>
                    </TextBlock>
                    <ProgressBar IsIndeterminate="True" Margin="0,8"/>
                </StackPanel>
            </Border>
        </Grid>
    </DockPanel>
    <Grid Background="{StaticResource BackdropColorBrush}" Margin="0,-34,0,0"
          Visibility="{Binding Dialog, Converter={StaticResource NotNullToVisibilityConverter}}">
        <Border BorderBrush="{DynamicResource ButtonBorderColorBrush}" BorderThickness="2" CornerRadius="8"
                Background="{StaticResource BackgroundColorBrush}" UseLayoutRounding="True"
                HorizontalAlignment="Center" VerticalAlignment="Center" Padding="4,4,4,0"
                Margin="64">
            <ContentPresenter Content="{Binding Dialog}"/>
        </Border>
    </Grid>
</Grid>
