<Grid x:Class="SLC_LayoutEditor.UI.LayoutEditor"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:vm="clr-namespace:SLC_LayoutEditor.ViewModel"
      xmlns:controls="clr-namespace:SLC_LayoutEditor.Controls"
      xmlns:enum="clr-namespace:SLC_LayoutEditor.Core.Enum"
      xmlns:converter="clr-namespace:SLC_LayoutEditor.Converter"
      xmlns:local="clr-namespace:SLC_LayoutEditor.UI"
      mc:Ignorable="d"
      d:DesignWidth="1100"
      d:DesignHeight="650">
    <Grid.DataContext>
        <vm:LayoutEditorViewModel/>
    </Grid.DataContext>
    <Grid.Resources>
        <converter:AircraftListSortConverter x:Key="AircraftListSortConverter"/>

        <Style x:Key="CabinSlotDropdownStyle" TargetType="ComboBox" BasedOn="{StaticResource TopListComboBoxStyle}">
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="Grid.IsSharedSizeScope" Value="True"/>
            <Setter Property="ItemTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition SharedSizeGroup="slotPreview" Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Text="{Binding}" Margin="0,0,12,0"/>
                            <Border CornerRadius="4" BorderThickness="1.5" Grid.Column="1"
                                                                        Width="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ActualHeight}">
                                <Border.Style>
                                    <Style TargetType="Border">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding}" Value="0">
                                                <Setter Property="BorderBrush" Value="{StaticResource AisleColorBrush}"/>
                                                <Setter Property="Background" Value="{StaticResource AisleColorBrush}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding}" Value="1">
                                                <Setter Property="Background" Value="{StaticResource WallColorBrush}"/>
                                                <Setter Property="BorderBrush" Value="{StaticResource WallColorBorderBrush}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding}" Value="2">
                                                <Setter Property="BorderBrush" Value="{StaticResource DoorColorBrush}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding}" Value="3">
                                                <Setter Property="BorderBrush" Value="{StaticResource LoadingBayColorBrush}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding}" Value="4">
                                                <Setter Property="BorderBrush" Value="{StaticResource CateringDoorColorBrush}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding}" Value="5">
                                                <Setter Property="BorderBrush" Value="{StaticResource CockpitColorBrush}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding}" Value="6">
                                                <Setter Property="Background" Value="{StaticResource CrewAreaColorBrush}"/>
                                                <Setter Property="BorderBrush" Value="{StaticResource CrewAreaBorderColorBrush}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding}" Value="7">
                                                <Setter Property="BorderBrush" Value="{StaticResource ToiletColorBrush}"/>
                                                <Setter Property="Background" Value="{StaticResource ToiletColorBrush}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding}" Value="8">
                                                <Setter Property="BorderBrush" Value="{StaticResource KitchenColorBrush}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding}" Value="9">
                                                <Setter Property="BorderBrush" Value="{StaticResource IntercomColorBrush}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding}" Value="10">
                                                <Setter Property="Background" Value="{StaticResource StairwellColorBrush}"/>
                                                <Setter Property="BorderBrush" Value="{StaticResource StairwellBorderColorBrush}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding}" Value="11">
                                                <Setter Property="Background" Value="{StaticResource BusinessClassColorBrush}"/>
                                                <Setter Property="BorderBrush" Value="{StaticResource BusinessClassColorBrush}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding}" Value="12">
                                                <Setter Property="Background" Value="{StaticResource EconomyClassColorBrush}"/>
                                                <Setter Property="BorderBrush" Value="{StaticResource EconomyClassColorBrush}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding}" Value="13">
                                                <Setter Property="Background" Value="{StaticResource FirstClassColorBrush}"/>
                                                <Setter Property="BorderBrush" Value="{StaticResource FirstClassColorBrush}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding}" Value="14">
                                                <Setter Property="Background" Value="{StaticResource PremiumClassColorBrush}"/>
                                                <Setter Property="BorderBrush" Value="{StaticResource PremiumClassColorBrush}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding}" Value="15">
                                                <Setter Property="Background" Value="{StaticResource SupersonicClassColorBrush}"/>
                                                <Setter Property="BorderBrush" Value="{StaticResource SupersonicClassColorBrush}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding}" Value="16">
                                                <Setter Property="Background" Value="{StaticResource UnavailableSeatColorBrush}"/>
                                                <Setter Property="BorderBrush" Value="{StaticResource UnavailableSeatColorBrush}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding}" Value="17">
                                                <Setter Property="BorderBrush" Value="{DynamicResource ServicePointStartColorBrush}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding}" Value="18">
                                                <Setter Property="BorderBrush" Value="{DynamicResource ServicePointEndColorBrush}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Border.Style>
                            </Border>
                        </Grid>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Grid.Resources>
    <DockPanel>
        <Border>
            <DockPanel Width="346" Margin="8" LastChildFill="False">
                <Border DockPanel.Dock="Top" Style="{DynamicResource CardStyle}">
                    <StackPanel>
                        <DockPanel Margin="0,0,0,8">
                            <ToggleButton Style="{StaticResource TemplateSwitchToggleButton}" DockPanel.Dock="Right"
                                      IsChecked="{Binding ElementName=control_layout, Path=IsTemplatingMode, UpdateSourceTrigger=PropertyChanged}"/>
                            <TextBlock DockPanel.Dock="Right" Margin="6,0,6,2" VerticalAlignment="Center"
                                   Foreground="{DynamicResource ForegroundSecondaryColorBrush}">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                        <Setter Property="Text" Value="Show layouts"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ElementName=control_layout, Path=IsTemplatingMode, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                                <Setter Property="Text" Value="Show templates"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                            <TextBlock Text="Aircrafts" Margin="4,0" Style="{StaticResource Title3TextStyle}"/>
                        </DockPanel>
                        <DockPanel Margin="8,0">
                            <Button DockPanel.Dock="Right" Width="22" Height="22" ToolTip="Add a new aircraft"
                                Click="AddAircraft_Click" Style="{StaticResource DefaultBorderedIconButtonStyle}" Content="{StaticResource Add}">
                            </Button>
                            <controls:RefinedComboBox x:Name="combo_layoutSets" Margin="0,4,8,4"
                                                  ItemsSource="{Binding LayoutSets, Converter={StaticResource AircraftListSortConverter}}"
                                                  SelectedItem="{Binding SelectedLayoutSet}" Grid.IsSharedSizeScope="True"
                                                  Watermark="{Binding SelectedLayoutSetText}"
                                                  Text="{Binding SelectedLayoutSet.AircraftName, Mode=OneWay}">
                                <controls:RefinedComboBox.Style>
                                    <Style TargetType="controls:RefinedComboBox" BasedOn="{StaticResource {x:Type controls:RefinedComboBox}}">
                                        <Setter Property="ItemTemplate">
                                            <Setter.Value>
                                                <DataTemplate>
                                                    <Grid>
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition Width="*"/>
                                                            <ColumnDefinition Width="1.5"/>
                                                            <ColumnDefinition SharedSizeGroup="layoutCount" Width="Auto"/>
                                                        </Grid.ColumnDefinitions>
                                                        <TextBlock Text="{Binding AircraftName}" Margin="0,0,8,0"/>
                                                        <Border BorderThickness="1,0" BorderBrush="{DynamicResource AccentColorBrush}"
                                                            DockPanel.Dock="Right" Grid.Column="1" Margin="0,-4,0,-16"/>
                                                        <TextBlock DockPanel.Dock="Right" FontStyle="Italic" Margin="8,0,0,0"
                                                               Grid.Column="2" TextAlignment="Right"
                                                               Text="{Binding CurrentCountText}">
                                                            <TextBlock.Style>
                                                                <Style TargetType="TextBlock">
                                                                    <Setter Property="Foreground" Value="{DynamicResource ForegroundSecondaryColorBrush}"/>
                                                                    <Style.Triggers>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding IsTemplatingMode}" Value="False"/>
                                                                                <Condition Binding="{Binding LayoutCount}" Value="0"/>
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Foreground" Value="{DynamicResource NoLayoutsColorBrush}"/>
                                                                        </MultiDataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding IsTemplatingMode}" Value="True"/>
                                                                                <Condition Binding="{Binding TemplateCount}" Value="0"/>
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Foreground" Value="{DynamicResource NoLayoutsColorBrush}"/>
                                                                        </MultiDataTrigger>
                                                                    </Style.Triggers>
                                                                </Style>
                                                            </TextBlock.Style>
                                                        </TextBlock>
                                                    </Grid>
                                                </DataTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </controls:RefinedComboBox.Style>
                            </controls:RefinedComboBox>
                        </DockPanel>
                        <Border Margin="-12,12,-12,-12" Style="{DynamicResource CardStyle}" Background="{DynamicResource RemoveDeckButtonPressedBackgroundBrush}"
                            Effect="{x:Null}" CornerRadius="12,12,8,8"
                            IsEnabled="{Binding IsAddCabinLayoutButtonEnabled}">
                            <Grid Margin="4">
                                <StackPanel>
                                    <StackPanel Orientation="Horizontal" Margin="0,0,0,4">
                                        <TextBlock>
                                            <TextBlock.Style>
                                                <Style TargetType="TextBlock" BasedOn="{StaticResource Title3TextStyle}">
                                                    <Setter Property="Text" Value="Cabin layouts"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding IsTemplatingMode}" Value="True">
                                                            <Setter Property="Text" Value="Templates"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBlock.Style>
                                        </TextBlock>
                                        <ProgressBar DockPanel.Dock="Top" IsIndeterminate="True" Style="{StaticResource MaterialDesignCircularProgressBar}"
                                                 Margin="10,0,0,-2" Height="16" Width="16" VerticalAlignment="Center"
                                                 Visibility="{Binding SelectedLayoutSet.IsLoadingLayouts, Converter={StaticResource BooleanToVisibilityConverter}, TargetNullValue=Collapsed, FallbackValue=Collapsed}"/>
                                    </StackPanel>
                                    <DockPanel DockPanel.Dock="Top" IsEnabled="{Binding IsAddCabinLayoutButtonEnabled}" Margin="4,0">
                                        <Button DockPanel.Dock="Right" Width="22" Height="22" ToolTip="{Binding AddLayoutTooltip}" Content="{StaticResource Add}"
                                            Click="CreateCabinLayout_Click" Style="{Binding AddLayoutButtonStyle}"/>
                                        <StackPanel>
                                            <controls:RefinedComboBox x:Name="combo_layouts" Margin="0,4,8,4"
                                                                  ItemsSource="{Binding SelectedLayoutSet.CabinLayouts, UpdateSourceTrigger=PropertyChanged}"
                                                                  SelectedItem="{Binding SelectedCabinLayout}"
                                                                  Watermark="{Binding SelectedLayoutText}"
                                                                  IsEnabled="{Binding SelectedLayoutSet.IsCabinLayoutSelectionEnabled}"
                                                                  Visibility="{Binding IsTemplatingMode, Converter={StaticResource InverseBooleanToVisibilityConverter}}"/>
                                            <controls:RefinedComboBox x:Name="combo_templates" Margin="0,4,8,4"
                                                                  ItemsSource="{Binding SelectedLayoutSet.Templates, UpdateSourceTrigger=PropertyChanged}"
                                                                  Style="{StaticResource TemplateComboBoxStyle}"
                                                                  SelectedItem="{Binding SelectedTemplate}"
                                                                  Watermark="{Binding SelectedTemplateText}"
                                                                  IsEnabled="{Binding SelectedLayoutSet.IsCabinLayoutSelectionEnabled}"
                                                                  Visibility="{Binding IsTemplatingMode, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                        </StackPanel>
                                    </DockPanel>
                                </StackPanel>
                            </Grid>
                        </Border>
                    </StackPanel>
                </Border>
                <Border DockPanel.Dock="Top" Background="{DynamicResource BackgroundDarkBrush}" Padding="4" Margin="8"
                    BorderBrush="{DynamicResource BackgroundLightBrush}" BorderThickness="1.5" CornerRadius="4"
                    Visibility="{Binding ActiveLayout, Converter={StaticResource NotNullToVisibilityConverter}}">
                    <StackPanel DockPanel.Dock="Bottom">
                        <UniformGrid Columns="5">
                            <controls:SeatCapacityBox Margin="4" SeatTypeLetter="SUPER"
                                          Capacity="{Binding ActiveLayout.SupersonicCapacity}"
                                          BoxBackground="{StaticResource SupersonicClassColorBrush}"
                                          ToolTip="Super class"/>
                            <controls:SeatCapacityBox Margin="4" SeatTypeLetter="FIRST"
                                          Capacity="{Binding ActiveLayout.FirstClassCapacity}"
                                          BoxBackground="{StaticResource FirstClassColorBrush}"
                                          ToolTip="First class"/>
                            <controls:SeatCapacityBox Margin="4" SeatTypeLetter="BZ"
                                          Capacity="{Binding ActiveLayout.BusinessCapacity}"
                                          BoxBackground="{StaticResource BusinessClassColorBrush}"
                                          ToolTip="Business class"/>
                            <controls:SeatCapacityBox Margin="4" SeatTypeLetter="PREM"
                                          Capacity="{Binding ActiveLayout.PremiumCapacity}"
                                          BoxBackground="{StaticResource PremiumClassColorBrush}"
                                          ToolTip="Premium class"/>
                            <controls:SeatCapacityBox Margin="4" SeatTypeLetter="ECO"
                                          Capacity="{Binding ActiveLayout.EconomyCapacity}"
                                          BoxBackground="{StaticResource EconomyClassColorBrush}"
                                          ToolTip="Economy class"/>
                        </UniformGrid>
                        <TextBlock Margin="4" Style="{StaticResource Title2TextStyle}" HorizontalAlignment="Center"
                               FontSize="24"
                           Text="{Binding ActiveLayout.PassengerCapacity, StringFormat={}Total: {0}, FallbackValue=Total: 0}"/>
                    </StackPanel>
                </Border>
                <controls:RefinedExpander DockPanel.Dock="Bottom" Margin="0,16,0,8" IsEnabled="{Binding ActiveLayout, Converter={StaticResource NotNullToBooleanConverter}}"
                                      Description="{Binding ActiveLayout.IssuesCountText}" ExpandDirection="Up">
                    <controls:RefinedExpander.Style>
                        <Style TargetType="controls:RefinedExpander" BasedOn="{StaticResource {x:Type controls:RefinedExpander}}">
                            <Setter Property="DescriptionForeground" Value="{DynamicResource ButtonBorderColorBrush}"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ActiveLayout.HasMinorIssues}" Value="True">
                                    <Setter Property="DescriptionForeground" Value="{DynamicResource WarnForegroundColorBrush}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ActiveLayout.HasSevereIssues}" Value="True">
                                    <Setter Property="DescriptionForeground" Value="{DynamicResource ErrorForegroundColorBrush}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </controls:RefinedExpander.Style>
                    <Expander.Header>
                        <TextBlock FontSize="16" Text="Issues" FontWeight="Bold">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                    <Style.Triggers>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Foreground" Value="{DynamicResource DisabledColorBrush}"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </Expander.Header>
                    <ScrollViewer VerticalScrollBarVisibility="Visible" Padding="0,4" x:Name="list_scroll">
                        <StackPanel Margin="12,4,4,4">
                            <TextBlock Text="Issues across all decks" FontSize="18"/>
                            <TextBlock Visibility="Collapsed">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource LayoutProblemTextStyle}">
                                        <Setter Property="Text" Value="No duplicate doors"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ActiveLayout.HasNoDuplicateDoors, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                                <Setter Property="Text" Value="Duplicate doors found!"/>
                                                <Setter Property="Foreground" Value="{StaticResource ErrorForegroundColorBrush}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                            <controls:LayoutProblemText ValidText="No duplicate Economy Class seats"
                                                    InvalidText="Duplicate Economy Class seats found!"
                                                    IsValid="{Binding ActiveLayout.HasNoDuplicateEconomySeats}"
                                                    InvalidSlots="{Binding ActiveLayout.DuplicateEconomySeats}"
                                                    ShowEye="True" ShowProblemsChanged="EconomyClass_ShowProblemsChanged"
                                                    ShowProblems="{Binding ShowEconomyClassIssues}"/>
                            <controls:LayoutProblemText ValidText="No duplicate Business Class seats"
                                                    InvalidText="Duplicate Business Class seats found!"
                                                    IsValid="{Binding ActiveLayout.HasNoDuplicateBusinessSeats}"
                                                    InvalidSlots="{Binding ActiveLayout.DuplicateBusinessSeats}"
                                                    ShowEye="True" ShowProblemsChanged="BusinessClass_ShowProblemsChanged"
                                                    ShowProblems="{Binding ShowBusinessClassIssues, UpdateSourceTrigger=PropertyChanged}"/>
                            <controls:LayoutProblemText ValidText="No duplicate Premium Class seats"
                                                    InvalidText="Duplicate Premium Class seats found!"
                                                    IsValid="{Binding ActiveLayout.HasNoDuplicatePremiumSeats}"
                                                    InvalidSlots="{Binding ActiveLayout.DuplicatePremiumSeats}"
                                                    ShowEye="True" ShowProblemsChanged="Premium_ShowProblemsChanged"
                                                    ShowProblems="{Binding ShowPremiumClassIssues}"/>
                            <controls:LayoutProblemText ValidText="No duplicate First Class seats"
                                                    InvalidText="Duplicate First Class seats found!"
                                                    IsValid="{Binding ActiveLayout.HasNoDuplicateFirstClassSeats}"
                                                    InvalidSlots="{Binding ActiveLayout.DuplicateFirstClassSeats}"
                                                    ShowEye="True" ShowProblemsChanged="FirstClass_ShowProblemsChanged"
                                                    ShowProblems="{Binding ShowFirstClassIssues}"/>
                            <controls:LayoutProblemText ValidText="No duplicate Supersonic Class seats"
                                                    InvalidText="Duplicate Supersonic Class seats found!"
                                                    IsValid="{Binding ActiveLayout.HasNoDuplicateSupersonicSeats}"
                                                    InvalidSlots="{Binding ActiveLayout.DuplicateSupersonicSeats}"
                                                    ShowEye="True" ShowProblemsChanged="SupersonicClass_ShowProblemsChanged"
                                                    ShowProblems="{Binding ShowSupersonicClassIssues}"/>
                            <controls:LayoutProblemText ValidText="No duplicate Unavailable seats"
                                                    InvalidText="Duplicate Unavailable seats found!"
                                                    IsValid="{Binding ActiveLayout.HasNoDuplicateUnavailableSeats}"
                                                    InvalidSlots="{Binding ActiveLayout.DuplicateUnavailableSeats}"
                                                    ShowEye="True" ShowProblemsChanged="UnavailableSeats_ShowProblemsChanged"
                                                    ShowProblems="{Binding ShowUnavailableSeatsIssues}"/>
                            <Separator Margin="0,4"/>
                            <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="No duplicate doors"
                                                    InvalidText="Duplicate doors found!"
                                                    IsValid="{Binding ActiveLayout.HasNoDuplicateDoors}"
                                                    InvalidSlots="{Binding ActiveLayout.DuplicateDoors}"
                                                    ShowEye="True"
                                                    ShowProblemsChanged="DuplicateDoors_ShowProblemsChanged"
                                                    ShowProblems="{Binding ActiveLayout.ShowDuplicateDoorsIssues}"
                                                    AutoFixTarget="{Binding ActiveLayout}"
                                                    ShowAutoFix="True"
                                                    AutoFixApplying="DuplicateDoors_AutoFixApplying"
                                                    Description="Make sure that each door has a unique number across all decks"/>
                            <controls:LayoutProblemText ValidText="Stairway positions valid"
                                                    InvalidText="{Binding StairwayErrorMessage}"
                                                    IsValid="{Binding ActiveLayout.StairwaysValid}"
                                                    InvalidSlots="{Binding ActiveLayout.InvalidStairways}"
                                                    ShowEye="True" 
                                                    ShowProblemsChanged="StairwayPositions_ShowProblemsChanged"
                                                    ShowProblems="{Binding ShowStairwayIssues}"
                                                    ShowAutoFix="True"
                                                    AutoFixApplying="StairwayPositions_AutoFixApplying"
                                                    AutoFixTarget="{Binding ActiveLayout}"
                                                    Description="When using multiple decks and adding stairways, make sure to align them on the same x/y coordinate"
                                                    NotRequiredText="No stairways required"
                                                    IsRequired="{Binding ActiveLayout.HasMultipleDecks}"/>
                            <TextBlock Text="Issues per deck" FontSize="18" Margin="0,16,0,0"/>
                            <DataGrid AutoGenerateColumns="False" Background="Transparent" HeadersVisibility="None"
                              GridLinesVisibility="None" BorderBrush="Transparent" CanUserAddRows="False" 
                              CanUserDeleteRows="False" CanUserReorderColumns="False" CanUserResizeColumns="False"
                              CanUserSortColumns="False" HorizontalScrollBarVisibility="Disabled"
                              ItemsSource="{Binding ActiveLayout.CabinDecks}"
                              PreviewMouseWheel="DeckProblemsList_PreviewMouseWheel"
                                  Margin="8,0,0,0">
                                <DataGrid.Resources>
                                    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent" />
                                    <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent" />
                                    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Transparent" />
                                    <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Transparent" />
                                    <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="Transparent"/>
                                </DataGrid.Resources>
                                <DataGrid.RowStyle>
                                    <Style TargetType="DataGridRow">
                                        <Setter Property="Background" Value="Transparent"/>
                                        <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                    </Style>
                                </DataGrid.RowStyle>
                                <DataGrid.CellStyle>
                                    <Style TargetType="DataGridCell">
                                        <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                        <Setter Property="BorderThickness" Value="0"/>
                                    </Style>
                                </DataGrid.CellStyle>
                                <DataGrid.Columns>
                                    <DataGridTemplateColumn>
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <StackPanel Visibility="{Binding CabinSlots, Converter={StaticResource NotNullToVisibilityConverter}}"
                                                       Margin="8,0,0,12" Width="297">
                                                    <TextBlock FontSize="16" DockPanel.Dock="Top" Margin="-8,0,0,0"
                                                           Foreground="{DynamicResource ForegroundSecondaryColorBrush}">
                                                        <TextBlock.Style>
                                                            <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                                                <Setter Property="Text" Value="{Binding Floor, StringFormat={}Floor {0}}"/>
                                                                <Style.Triggers>
                                                                    <DataTrigger Binding="{Binding Floor}" Value="1">
                                                                        <Setter Property="Text" Value="Lower deck"/>
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Binding Floor}" Value="2">
                                                                        <Setter Property="Text" Value="Upper deck"/>
                                                                    </DataTrigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </TextBlock.Style>
                                                    </TextBlock>
                                                    <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="Deck slots valid"
                                                                            InvalidText="Invalid amount of deck slots!"
                                                                            IsValid="{Binding AreSlotsValid}"
                                                                            ShowAutoFix="True"
                                                                            AutoFixTarget="{Binding}"
                                                                            AutoFixApplying="Slots_AutoFixApplying"
                                                                            Description="This layout validator checks if your deck has &quot;holes&quot;, i.e. missing tiles"/>
                                                    <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="Doors available"
                                                                            InvalidText="No doors for this deck!"
                                                                            IsValid="{Binding AreDoorsValid}"
                                                                            Description="Each deck needs at least one door. Also make sure that each layout has at least one loading bay, catering doors are optional"/>
                                                    <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="CAT/LB on correct side"
                                                                            InvalidText="CAT/LB detected on the left side"
                                                                            InvalidSlots="{Binding InvalidCateringDoorsAndLoadingBays}"
                                                                            ShowEye="True" 
                                                                            ShowProblemsChanged="CateringAndLoadingBays_ShowProblemsChanged"
                                                                            ShowProblems="{Binding ShowCateringAndLoadingBayIssues}"
                                                                            IsValid="{Binding AreCateringAndLoadingBaysValid}" IsSevereProblem="False"
                                                                            Description="Catering doors and loading bays should face the right side of the layout (top side in the view)"/>
                                                    <Separator Margin="0,4"/>
                                                    <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="Service start- and endpoints are valid"
                                                                            InvalidText="Invalid service points!"
                                                                            IsValid="{Binding AreServicePointsValid}"
                                                                            Description="Each service start point (&lt;) also requires an end point (&gt;) in the same row"/>
                                                    <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="All seat rows covered by service"
                                                                            InvalidText="Some rows aren't covered by service!"
                                                                            IsValid="{Binding AreSeatsReachableByService}" IsSevereProblem="False"
                                                                            IsRequired="{Binding AreKitchensValid}"
                                                                            NotRequiredText="No service coverage required (no kitchen)"
                                                                            Description="In case you have a kitchen on this deck, make sure to cover all rows with the service start- and endpoints"/>
                                                    <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="Valid galley count"
                                                                            InvalidText="Insufficient galley seats for servicing!"
                                                                            IsValid="{Binding AreGalleysValid}"
                                                                            Description="Make sure to have at least as many galley seats on this deck as there are service areas (denoted by &lt; and &gt;)"/>
                                                    <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="Kitchen accessible (In-Flight services available)"
                                                                            InvalidText="No kitchen available! (No In-Flight services)"
                                                                            IsValid="{Binding AreKitchensValid}" IsSevereProblem="False"
                                                                            Description="If you wanna be able to offer in-flight services, make sure to place down a kitchen"/>
                                                    <Separator Margin="0,4"/>
                                                    <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="Toilets available"
                                                                            InvalidText="No toilets on this deck!"
                                                                            IsValid="{Binding AreToiletsAvailable}" IsSevereProblem="False"
                                                                            Description="In order to satisfy the needs of your passengers, one or more toilets are required"/>
                                                </StackPanel>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                </DataGrid.Columns>
                            </DataGrid>
                        </StackPanel>
                    </ScrollViewer>
                </controls:RefinedExpander>
            </DockPanel>
        </Border>
        <Border Width="1" Background="{StaticResource DisabledColorBrush}"/>
        <Grid>
            <Grid IsEnabled="{Binding ActiveLayout, Converter={StaticResource NotNullToBooleanConverter}}">
                <Grid.Style>
                    <Style TargetType="Grid">
                        <Setter Property="Effect" Value="{x:Null}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsLoadingLayout}" Value="True">
                                <Setter Property="Effect" Value="{StaticResource DisableBlur}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
                <controls:CabinLayoutControl x:Name="control_layout" IsEnabled="{Binding ActiveLayout, Converter={StaticResource NotNullToBooleanConverter}}"
                                             CabinLayout="{Binding ActiveLayout, UpdateSourceTrigger=PropertyChanged}"
                                             SelectedSlotsChanged="CabinLayout_SelectedSlotsChanged"
                                             Changed="CabinLayoutChanged"
                                             TemplatingModeToggled="Layout_TemplatingModeToggled"
                                             TemplateCreated="Layout_TemplateCreated">
                </controls:CabinLayoutControl>
                <Border VerticalAlignment="Bottom" CornerRadius="12,12,0,0"
                        HorizontalAlignment="Center" MinWidth="500"
                        Background="{DynamicResource BackgroundDarkBrush}">
                    <Border.Style>
                        <Style TargetType="Border">
                            <Setter Property="Margin" Value="0,0,0,0"/>
                            <Setter Property="Padding" Value="12"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=control_layout, Path=IsHorizontalScrollBarVisible, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                    <Setter Property="Margin" Value="0,0,0,7"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ElementName=control_layout, Path=CabinLayout.IsTemplate, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                    <Setter Property="BorderBrush" Value="{DynamicResource TemplatingModeBrush}"/>
                                    <Setter Property="BorderThickness" Value="1.5,1.5,1.5,0"/>
                                    <Setter Property="Padding" Value="10.5,12"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Border.Style>
                    <StackPanel>
                        <StackPanel Visibility="{Binding IsSingleCabinSlotSelected, Converter={StaticResource InverseBooleanToVisibilityConverter}}">
                            <StackPanel Orientation="Horizontal">
                                <TextBlock FontSize="16">
                                    <Run Text="{Binding SelectedCabinSlots.Count, Mode=OneWay, StringFormat={}Multi-slot configuration ({0} selected slots}"/>
                                    <Run Text="{Binding SelectedFloorText, Mode=OneWay, StringFormat={}on {0})}"/>
                                </TextBlock>
                            </StackPanel>
                            <UniformGrid Rows="1">
                                <!--<UniformGrid.Style>
                        <Style TargetType="UniformGrid">
                            <Setter Property="Columns" Value="3"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding SelectedAutomationIndex}" Value="0">
                                    <Setter Property="Columns" Value="4"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </UniformGrid.Style>-->
                                <StackPanel Margin="4">
                                    <TextBlock Text="Slot type" Margin="0,0,0,4"/>
                                    <ComboBox ItemsSource="{Binding Source={enum:EnumBindingSource {x:Type enum:CabinSlotType}}}"
                                              SelectedIndex="{Binding SelectedMultiSlotTypeIndex}"
                                              SelectionChanged="MultiSelect_SlotTypeSelectionChanged"
                                              Style="{StaticResource CabinSlotDropdownStyle}"/>
                                </StackPanel>
                                <StackPanel Margin="4">
                                    <TextBlock Text="Automation" Margin="0,0,0,4"/>
                                    <ComboBox SelectedIndex="{Binding SelectedAutomationIndex}"
                                              Style="{StaticResource TopListComboBoxStyle}">
                                        <ComboBoxItem Content="Seat numeration" ToolTip="Sets numeration and letters automatically for you"/>
                                        <ComboBoxItem Content="Auto walls" ToolTip="Automatically sets walls around your layout"/>
                                        <ComboBoxItem Content="Service points" Visibility="Collapsed"/>
                                    </ComboBox>
                                </StackPanel>
                                <StackPanel Margin="4" ToolTip="When modifying multiple rows, split letters with ,"
                                            Visibility="{Binding SelectedAutomationIndex, Converter={StaticResource EqualsToVisibilityConverter}, ConverterParameter=0}">
                                    <TextBlock Margin="0,0,0,4" Text="Seat letter(s)"/>
                                    <TextBox Text="{Binding AutomationSeatLetters, UpdateSourceTrigger=PropertyChanged}"/>
                                </StackPanel>
                                <StackPanel Margin="4" ToolTip="With which number should the automation start when numbering seats"
                                            Visibility="{Binding SelectedAutomationIndex, Converter={StaticResource EqualsToVisibilityConverter}, ConverterParameter=0}">
                                    <TextBlock Margin="0,0,0,4" Text="Starting number"/>
                                    <TextBox Text="{Binding AutomationSeatStartNumber, UpdateSourceTrigger=PropertyChanged}"/>
                                </StackPanel>
                                <StackPanel Margin="4" Visibility="{Binding SelectedAutomationIndex, Converter={StaticResource EqualsToVisibilityConverter}, ConverterParameter=1}">
                                    <TextBlock Margin="0,0,0,4" Text="Target deck"/>
                                    <ComboBox ItemsSource="{Binding ActiveLayout.CabinDecks}" DisplayMemberPath="Floor"
                                              Style="{StaticResource TopListComboBoxStyle}"/>
                                </StackPanel>
                                <Button Margin="4" Content="Automate" Click="Automate_Click">
                                    <Button.Style>
                                        <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding SelectedAutomationIndex}" Value="-1">
                                                    <Setter Property="IsEnabled" Value="False"/>
                                                </DataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding SelectedAutomationIndex}" Value="0"/>
                                                        <Condition Binding="{Binding AutomationLettersValid}"
                                                       Value="False">
                                                        </Condition>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="IsEnabled" Value="False"/>
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Button.Style>
                                </Button>
                            </UniformGrid>
                        </StackPanel>
                        <StackPanel Visibility="{Binding IsSingleCabinSlotSelected, Converter={StaticResource BooleanToVisibilityConverter}}"
                                    IsEnabled="{Binding SelectedCabinSlot, Converter={StaticResource NotNullToBooleanConverter}}">
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="Single slot configuration " Style="{StaticResource Title3TextStyle}"/>
                                <TextBlock Visibility="{Binding SelectedCabinSlot, Converter={StaticResource NotNullToVisibilityConverter}}"
                                       Style="{StaticResource Title3TextStyle}">
                                    <Run Text="{Binding SelectedFloorText, Mode=OneWay, StringFormat={}({0}}"/><Run Text=","/>
                                    <Run Text="{Binding SelectedCabinSlot.Row, StringFormat={}Row {0}, Converter={StaticResource OffsetConverter}, ConverterParameter=1}"/><Run Text=","/>
                                    <Run Text="{Binding SelectedCabinSlot.Column, StringFormat={}Column {0}, Converter={StaticResource OffsetConverter}, ConverterParameter=1}"/>
                                </TextBlock>
                            </StackPanel>
                            <UniformGrid Rows="1" Margin="4,0">
                                <StackPanel Margin="4">
                                    <TextBlock Text="Slot type" Margin="0,0,0,4"/>
                                    <ComboBox ItemsSource="{Binding Source={enum:EnumBindingSource {x:Type enum:CabinSlotType}}}"
                                              SelectedIndex="{Binding SelectedCabinSlotTypeId}"
                                              Style="{StaticResource CabinSlotDropdownStyle}"/>
                                </StackPanel>
                                <StackPanel Margin="4">
                                    <DockPanel>
                                        <TextBlock DockPanel.Dock="Right"
                                       Visibility="{Binding SelectedCabinSlot.HasSlotNumber, Converter={StaticResource BooleanToVisibilityConverter}}"
                                       Text="{Binding SelectedCabinSlot.MaxSlotNumber, Mode=OneWay, StringFormat={}(max. {0})}"/>
                                        <TextBlock Margin="0,0,0,4">
                                            <TextBlock.Style>
                                                <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                                    <Setter Property="Text" Value="Seat number"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding SelectedCabinSlot.IsDoor, UpdateSourceTrigger=PropertyChanged}" 
                                                             Value="True">
                                                            <Setter Property="Text" Value="Door number"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBlock.Style>
                                        </TextBlock>
                                    </DockPanel>
                                    <TextBox Text="{Binding SelectedCabinSlot.SlotNumber, UpdateSourceTrigger=PropertyChanged}" 
                                             IsEnabled="{Binding SelectedCabinSlot.HasSlotNumber, UpdateSourceTrigger=PropertyChanged, FallbackValue=False, TargetNullValue=False}"/>
                                </StackPanel>
                                <StackPanel Margin="4">
                                    <TextBlock Margin="0,0,0,4" Text="Seat letter"/>
                                    <TextBox Text="{Binding SelectedCabinSlot.SeatLetter, UpdateSourceTrigger=PropertyChanged}" 
                                             IsEnabled="{Binding SelectedCabinSlot.IsSeat, UpdateSourceTrigger=PropertyChanged, FallbackValue=False, TargetNullValue=False}"/>
                                </StackPanel>
                            </UniformGrid>
                        </StackPanel>
                    </StackPanel>
                </Border>
                <Grid HorizontalAlignment="Right" VerticalAlignment="Bottom">
                    <Grid.Style>
                        <Style TargetType="Grid">
                            <Setter Property="Margin" Value="8"/>
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ElementName=control_layout, Path=IsHorizontalScrollBarVisible, UpdateSourceTrigger=PropertyChanged}" Value="True"/>
                                        <Condition Binding="{Binding ElementName=control_layout, Path=IsVerticalScrollBarVisible, UpdateSourceTrigger=PropertyChanged}" Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Margin" Value="8,8,8,15"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ElementName=control_layout, Path=IsHorizontalScrollBarVisible, UpdateSourceTrigger=PropertyChanged}" Value="False"/>
                                        <Condition Binding="{Binding ElementName=control_layout, Path=IsVerticalScrollBarVisible, UpdateSourceTrigger=PropertyChanged}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Margin" Value="8,8,15,8"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ElementName=control_layout, Path=IsHorizontalScrollBarVisible, UpdateSourceTrigger=PropertyChanged}" Value="True"/>
                                        <Condition Binding="{Binding ElementName=control_layout, Path=IsVerticalScrollBarVisible, UpdateSourceTrigger=PropertyChanged}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Margin" Value="8,8,15,15"/>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Style>
                    <Button Click="SaveLayout_Click" Content="{StaticResource Save}" ToolTip="Save your changes"
                            Style="{StaticResource FilledLargeRoundIconButtonStyle}"/>
                    <Button VerticalAlignment="Bottom" HorizontalAlignment="Right" Content="{DynamicResource More}"
                            Style="{StaticResource FilledRoundIconButtonStyle}" ToolTip="More options" Click="More_Click">
                        <Button.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="Save as..." Click="CabinLayout_SaveAs_Click"/>
                            </ContextMenu>
                        </Button.ContextMenu>
                    </Button>
                </Grid>
            </Grid>
            <Border Background="{DynamicResource BackdropColorBrush}"
                    Visibility="{Binding IsLoadingLayout, Converter={StaticResource BooleanToVisibilityConverter}}">
                <StackPanel VerticalAlignment="Center" HorizontalAlignment="Stretch" Margin="16">
                    <TextBlock Style="{StaticResource Title1TextStyle}" HorizontalAlignment="Center">
                        <Run Text="Loading cabin layout &quot;"/><Run Text="{Binding ActiveLayout.LayoutName}"/><Run Text="&quot;"/>
                    </TextBlock>
                    <ProgressBar IsIndeterminate="True" Margin="0,8" Visibility="Collapsed"/>
                </StackPanel>
            </Border>
        </Grid>
    </DockPanel>
</Grid>
