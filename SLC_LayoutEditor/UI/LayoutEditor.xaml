<Grid x:Class="SLC_LayoutEditor.UI.LayoutEditor"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:vm="clr-namespace:SLC_LayoutEditor.ViewModel"
      xmlns:controls="clr-namespace:SLC_LayoutEditor.Controls"
      xmlns:enum="clr-namespace:SLC_LayoutEditor.Core.Enum"
      xmlns:converter="clr-namespace:SLC_LayoutEditor.Converter"
      xmlns:local="clr-namespace:SLC_LayoutEditor.UI"
      mc:Ignorable="d"
      d:DesignHeight="650">
    <Grid.DataContext>
        <vm:LayoutEditorViewModel/>
    </Grid.DataContext>
    <Grid.Resources>
        <converter:AircraftListSortConverter x:Key="AircraftListSortConverter"/>
    </Grid.Resources>
    <DockPanel>
        <DockPanel Width="346" Margin="8" LastChildFill="False">
            <Border DockPanel.Dock="Top" Style="{DynamicResource CardStyle}">
                <StackPanel>
                    <DockPanel Margin="0,0,0,4">
                        <ToggleButton Style="{StaticResource TemplateSwitchToggleButton}" DockPanel.Dock="Right"
                                      IsChecked="{Binding ElementName=control_layout, Path=IsTemplatingMode, UpdateSourceTrigger=PropertyChanged}"/>
                        <TextBlock DockPanel.Dock="Right" Margin="6,0,6,2" VerticalAlignment="Center"
                                   Foreground="{DynamicResource ForegroundSecondaryColorBrush}">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                    <Setter Property="Text" Value="Layout mode"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=control_layout, Path=IsTemplatingMode, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                            <Setter Property="Text" Value="Template mode"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                        <TextBlock Text="Aircraft" Margin="4,0" Style="{StaticResource Title3TextStyle}"/>
                    </DockPanel>
                    <DockPanel Margin="4,0">
                        <Button DockPanel.Dock="Right" Width="22" Height="22" ToolTip="Add new airplane"
                                Click="AddAirplane_Click" Style="{StaticResource BorderedIconButton}" Content="{StaticResource Add}">
                        </Button>
                        <controls:RefinedComboBox x:Name="combo_layoutSets" Margin="0,4,8,4"
                                                  ItemsSource="{Binding LayoutSets, Converter={StaticResource AircraftListSortConverter}}"
                                                  SelectedItem="{Binding SelectedLayoutSet}" Grid.IsSharedSizeScope="True"
                                                  Watermark="{Binding SelectedLayoutSetText}"
                                                  Text="{Binding SelectedLayoutSet.AirplaneName}"
                                                  AlternationCount="2">
                            <controls:RefinedComboBox.Style>
                                <Style TargetType="controls:RefinedComboBox" BasedOn="{StaticResource {x:Type controls:RefinedComboBox}}">
                                    <Setter Property="ItemTemplate">
                                        <Setter.Value>
                                            <DataTemplate>
                                                <Grid>
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="*"/>
                                                        <ColumnDefinition Width="1.5"/>
                                                        <ColumnDefinition SharedSizeGroup="layoutCount" Width="Auto"/>
                                                    </Grid.ColumnDefinitions>
                                                    <TextBlock Text="{Binding AirplaneName}" Margin="0,0,8,0"/>
                                                    <Border BorderThickness="1,0" BorderBrush="{DynamicResource AccentColorBrush}"
                                                            DockPanel.Dock="Right" Grid.Column="1" Margin="0,-4,0,-16"/>
                                                    <TextBlock DockPanel.Dock="Right" FontStyle="Italic" Margin="8,0,0,0"
                                                               Grid.Column="2" TextAlignment="Right"
                                                               Text="{Binding CurrentCountText}">
                                                        <TextBlock.Style>
                                                            <Style TargetType="TextBlock">
                                                                <Setter Property="Foreground" Value="{DynamicResource ForegroundSecondaryColorBrush}"/>
                                                                <Style.Triggers>
                                                                    <MultiDataTrigger>
                                                                        <MultiDataTrigger.Conditions>
                                                                            <Condition Binding="{Binding IsTemplatingMode}" Value="False"/>
                                                                            <Condition Binding="{Binding LayoutCount}" Value="0"/>
                                                                        </MultiDataTrigger.Conditions>
                                                                        <Setter Property="Foreground" Value="{DynamicResource NoLayoutsColorBrush}"/>
                                                                    </MultiDataTrigger>
                                                                    <MultiDataTrigger>
                                                                        <MultiDataTrigger.Conditions>
                                                                            <Condition Binding="{Binding IsTemplatingMode}" Value="True"/>
                                                                            <Condition Binding="{Binding TemplateCount}" Value="0"/>
                                                                        </MultiDataTrigger.Conditions>
                                                                        <Setter Property="Foreground" Value="{DynamicResource NoLayoutsColorBrush}"/>
                                                                    </MultiDataTrigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </TextBlock.Style>
                                                    </TextBlock>
                                                </Grid>
                                            </DataTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </controls:RefinedComboBox.Style>
                        </controls:RefinedComboBox>
                    </DockPanel>
                    <Border Margin="-8,12,-8,-8" Style="{DynamicResource CardStyle}" Background="{DynamicResource RemoveDeckButtonPressedBackgroundBrush}"
                            Effect="{x:Null}" CornerRadius="12,12,8,8"
                            IsEnabled="{Binding IsAddCabinLayoutButtonEnabled}">
                        <Grid>
                            <StackPanel Margin="4,0">
                                <TextBlock Text="Cabin layout" Style="{StaticResource Title3TextStyle}" Margin="0,0,0,4"/>
                                <ProgressBar DockPanel.Dock="Top" IsIndeterminate="True"
                                             Margin="4,0" Visibility="{Binding SelectedLayoutSet.IsLoadingLayouts, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}"/>
                                <DockPanel DockPanel.Dock="Top" IsEnabled="{Binding IsAddCabinLayoutButtonEnabled}">
                                    <Button DockPanel.Dock="Right" Width="22" Height="22" ToolTip="Add new layout" Content="{StaticResource Add}"
                                            Click="AddCabinLayout_Click" Style="{StaticResource BorderedIconButton}"/>
                                    <controls:RefinedComboBox x:Name="combo_layouts" Margin="0,4,8,4"
                                                              SelectedItem="{Binding SelectedCabinLayout}"
                                                              Watermark="{Binding SelectedLayoutText}"
                                                              IsEnabled="{Binding SelectedLayoutSet.IsCabinLayoutSelectionEnabled}">
                                        <controls:RefinedComboBox.Style>
                                            <Style TargetType="controls:RefinedComboBox" BasedOn="{StaticResource {x:Type controls:RefinedComboBox}}">
                                                <Setter Property="ItemsSource" Value="{Binding SelectedLayoutSet.CabinLayouts, UpdateSourceTrigger=PropertyChanged}"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding SelectedLayoutSet.IsTemplatingMode}">
                                                        <Setter Property="ItemsSource" Value="{Binding SelectedLayoutSet.Templates, UpdateSourceTrigger=PropertyChanged}"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </controls:RefinedComboBox.Style>
                                    </controls:RefinedComboBox>
                                </DockPanel>
                            </StackPanel>
                        </Grid>
                    </Border>
                </StackPanel>
            </Border>
            <Border DockPanel.Dock="Top" Background="{DynamicResource BackgroundDarkBrush}" Padding="4" Margin="8"
                    BorderBrush="{DynamicResource BackgroundLightBrush}" BorderThickness="1.5" CornerRadius="4"
                    Visibility="{Binding SelectedCabinLayout, Converter={StaticResource NotNullToVisibilityConverter}}">
                <StackPanel DockPanel.Dock="Bottom">
                    <UniformGrid Columns="5">
                        <controls:SeatCapacityBox Margin="4" SeatTypeLetter="SUPER"
                                          Capacity="{Binding SelectedCabinLayout.SupersonicCapacity}"
                                          BoxBackground="{StaticResource SupersonicClassColorBrush}"
                                          ToolTip="Super class"/>
                        <controls:SeatCapacityBox Margin="4" SeatTypeLetter="FIRST"
                                          Capacity="{Binding SelectedCabinLayout.FirstClassCapacity}"
                                          BoxBackground="{StaticResource FirstClassColorBrush}"
                                          ToolTip="First class"/>
                        <controls:SeatCapacityBox Margin="4" SeatTypeLetter="BZ"
                                          Capacity="{Binding SelectedCabinLayout.BusinessCapacity}"
                                          BoxBackground="{StaticResource BusinessClassColorBrush}"
                                          ToolTip="Business class"/>
                        <controls:SeatCapacityBox Margin="4" SeatTypeLetter="PREM"
                                          Capacity="{Binding SelectedCabinLayout.PremiumCapacity}"
                                          BoxBackground="{StaticResource PremiumClassColorBrush}"
                                          ToolTip="Premium class"/>
                        <controls:SeatCapacityBox Margin="4" SeatTypeLetter="ECO"
                                          Capacity="{Binding SelectedCabinLayout.EconomyCapacity}"
                                          BoxBackground="{StaticResource EconomyClassColorBrush}"
                                          ToolTip="Economy class"/>
                    </UniformGrid>
                    <TextBlock Margin="4" Style="{StaticResource Title2TextStyle}" HorizontalAlignment="Center"
                               FontSize="24"
                           Text="{Binding SelectedCabinLayout.PassengerCapacity, StringFormat={}Total: {0}, FallbackValue=Total: 0}"/>
                </StackPanel>
            </Border>
            <controls:RefinedExpander DockPanel.Dock="Bottom" Margin="0,16,0,8" IsEnabled="{Binding SelectedCabinLayout, Converter={StaticResource NotNullToBooleanConverter}}"
                                      Description="{Binding SelectedCabinLayout.IssuesCountText}" ExpandDirection="Up">
                <controls:RefinedExpander.Style>
                    <Style TargetType="controls:RefinedExpander" BasedOn="{StaticResource {x:Type controls:RefinedExpander}}">
                        <Setter Property="DescriptionForeground" Value="{DynamicResource ButtonBorderColorBrush}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding SelectedCabinLayout.HasMinorIssues}" Value="True">
                                <Setter Property="DescriptionForeground" Value="{DynamicResource WarnForegroundColorBrush}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding SelectedCabinLayout.HasSevereIssues}" Value="True">
                                <Setter Property="DescriptionForeground" Value="{DynamicResource ErrorForegroundColorBrush}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </controls:RefinedExpander.Style>
                <Expander.Header>
                    <TextBlock FontSize="16" Text="Issues" FontWeight="Bold">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                <Style.Triggers>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Foreground" Value="{DynamicResource DisabledColorBrush}"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </Expander.Header>
                <ScrollViewer VerticalScrollBarVisibility="Visible" Margin="0,4" x:Name="list_scroll">
                    <StackPanel Margin="12,4,4,4">
                        <TextBlock Text="Issues across all decks" FontSize="18"/>
                        <TextBlock Visibility="Collapsed">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock" BasedOn="{StaticResource LayoutProblemTextStyle}">
                                    <Setter Property="Text" Value="No duplicate doors"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding SelectedCabinLayout.HasNoDuplicateDoors, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                            <Setter Property="Text" Value="Duplicate doors found!"/>
                                            <Setter Property="Foreground" Value="{StaticResource ErrorForegroundColorBrush}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                        <controls:LayoutProblemText ValidText="No duplicate Economy Class seats"
                                                    InvalidText="Duplicate Economy Class seats found!"
                                                    IsValid="{Binding SelectedCabinLayout.HasNoDuplicateEconomySeats}"
                                                    InvalidSlots="{Binding SelectedCabinLayout.DuplicateEconomySeats}"
                                                    ShowEye="True" ShowProblemsChanged="EconomyClass_ShowProblemsChanged"
                                                    ShowProblems="{Binding ShowEconomyClassIssues}"/>
                        <controls:LayoutProblemText ValidText="No duplicate Business Class seats"
                                                    InvalidText="Duplicate Business Class seats found!"
                                                    IsValid="{Binding SelectedCabinLayout.HasNoDuplicateBusinessSeats}"
                                                    InvalidSlots="{Binding SelectedCabinLayout.DuplicateBusinessSeats}"
                                                    ShowEye="True" ShowProblemsChanged="BusinessClass_ShowProblemsChanged"
                                                    ShowProblems="{Binding ShowBusinessClassIssues, UpdateSourceTrigger=PropertyChanged}"/>
                        <controls:LayoutProblemText ValidText="No duplicate Premium Class seats"
                                                    InvalidText="Duplicate Premium Class seats found!"
                                                    IsValid="{Binding SelectedCabinLayout.HasNoDuplicatePremiumSeats}"
                                                    InvalidSlots="{Binding SelectedCabinLayout.DuplicatePremiumSeats}"
                                                    ShowEye="True" ShowProblemsChanged="Premium_ShowProblemsChanged"
                                                    ShowProblems="{Binding ShowPremiumClassIssues}"/>
                        <controls:LayoutProblemText ValidText="No duplicate First Class seats"
                                                    InvalidText="Duplicate First Class seats found!"
                                                    IsValid="{Binding SelectedCabinLayout.HasNoDuplicateFirstClassSeats}"
                                                    InvalidSlots="{Binding SelectedCabinLayout.DuplicateFirstClassSeats}"
                                                    ShowEye="True" ShowProblemsChanged="FirstClass_ShowProblemsChanged"
                                                    ShowProblems="{Binding ShowFirstClassIssues}"/>
                        <controls:LayoutProblemText ValidText="No duplicate Supersonic Class seats"
                                                    InvalidText="Duplicate Supersonic Class seats found!"
                                                    IsValid="{Binding SelectedCabinLayout.HasNoDuplicateSupersonicSeats}"
                                                    InvalidSlots="{Binding SelectedCabinLayout.DuplicateSupersonicSeats}"
                                                    ShowEye="True" ShowProblemsChanged="SupersonicClass_ShowProblemsChanged"
                                                    ShowProblems="{Binding ShowSupersonicClassIssues}"/>
                        <controls:LayoutProblemText ValidText="No duplicate Unavailable seats"
                                                    InvalidText="Duplicate Unavailable seats found!"
                                                    IsValid="{Binding SelectedCabinLayout.HasNoDuplicateUnavailableSeats}"
                                                    InvalidSlots="{Binding SelectedCabinLayout.DuplicateUnavailableSeats}"
                                                    ShowEye="True" ShowProblemsChanged="UnavailableSeats_ShowProblemsChanged"
                                                    ShowProblems="{Binding ShowUnavailableSeatsIssues}"/>
                        <Separator Margin="0,4"/>
                        <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="No duplicate doors"
                                                    InvalidText="Duplicate doors found!"
                                                    IsValid="{Binding SelectedCabinLayout.HasNoDuplicateDoors}"
                                                    InvalidSlots="{Binding SelectedCabinLayout.DuplicateDoors}"
                                                    ShowEye="True"
                                                    ShowProblemsChanged="DuplicateDoors_ShowProblemsChanged"
                                                    ShowProblems="{Binding SelectedCabinLayout.ShowDuplicateDoorsIssues}"
                                                    AutoFixTarget="{Binding SelectedCabinLayout}"
                                                    ShowAutoFix="True"
                                                    AutoFixApplying="DuplicateDoors_AutoFixApplying"
                                                    Description="Make sure that each door has a unique number across all decks"/>
                        <controls:LayoutProblemText ValidText="Stairway positions valid"
                                                    InvalidText="{Binding StairwayErrorMessage}"
                                                    IsValid="{Binding SelectedCabinLayout.StairwaysValid}"
                                                    InvalidSlots="{Binding SelectedCabinLayout.InvalidStairways}"
                                                    ShowEye="True" 
                                                    ShowProblemsChanged="StairwayPositions_ShowProblemsChanged"
                                                    ShowProblems="{Binding ShowStairwayIssues}"
                                                    ShowAutoFix="True"
                                                    AutoFixApplying="StairwayPositions_AutoFixApplying"
                                                    AutoFixTarget="{Binding SelectedCabinLayout}"
                                                    Description="When using multiple decks and adding stairways, make sure to align them on the same x/y coordinate"
                                                    NotRequiredText="No stairways required"
                                                    IsRequired="{Binding SelectedCabinLayout.HasMultipleDecks}"/>
                        <TextBlock Text="Issues per deck" FontSize="18" Margin="0,16,0,0"/>
                        <DataGrid AutoGenerateColumns="False" Background="Transparent" HeadersVisibility="None"
                              GridLinesVisibility="None" BorderBrush="Transparent" CanUserAddRows="False" 
                              CanUserDeleteRows="False" CanUserReorderColumns="False" CanUserResizeColumns="False"
                              CanUserSortColumns="False" HorizontalScrollBarVisibility="Disabled"
                              ItemsSource="{Binding SelectedCabinLayout.CabinDecks}"
                              PreviewMouseWheel="DeckProblemsList_PreviewMouseWheel"
                                  Margin="8,0,0,0">
                            <DataGrid.Resources>
                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent" />
                                <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent" />
                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Transparent" />
                                <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Transparent" />
                                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="Transparent"/>
                            </DataGrid.Resources>
                            <DataGrid.RowStyle>
                                <Style TargetType="DataGridRow">
                                    <Setter Property="Background" Value="Transparent"/>
                                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                </Style>
                            </DataGrid.RowStyle>
                            <DataGrid.CellStyle>
                                <Style TargetType="DataGridCell">
                                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                    <Setter Property="BorderThickness" Value="0"/>
                                </Style>
                            </DataGrid.CellStyle>
                            <DataGrid.Columns>
                                <DataGridTemplateColumn>
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel Visibility="{Binding CabinSlots, Converter={StaticResource NotNullToVisibilityConverter}}"
                                                       Margin="8,0,0,12" Width="297">
                                                <TextBlock FontSize="16" DockPanel.Dock="Top" Margin="-8,0,0,0"
                                                           Foreground="{DynamicResource ForegroundSecondaryColorBrush}">
                                                    <TextBlock.Style>
                                                        <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                                            <Setter Property="Text" Value="{Binding Floor, StringFormat={}Floor {0}}"/>
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding Floor}" Value="1">
                                                                    <Setter Property="Text" Value="Lower deck"/>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding Floor}" Value="2">
                                                                    <Setter Property="Text" Value="Upper deck"/>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </TextBlock.Style>
                                                </TextBlock>
                                                <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="Deck slots valid"
                                                                            InvalidText="Invalid amount of deck slots!"
                                                                            IsValid="{Binding AreSlotsValid}"
                                                                            ShowAutoFix="True"
                                                                            AutoFixTarget="{Binding}"
                                                                            AutoFixApplying="Slots_AutoFixApplying"
                                                                            Description="This layout validator checks if your deck has &quot;holes&quot;, i.e. missing tiles"/>
                                                <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="Doors available"
                                                                            InvalidText="No doors for this deck!"
                                                                            IsValid="{Binding AreDoorsValid}"
                                                                            Description="Each deck needs at least one door. Also make sure that each layout has at least one loading bay, catering doors are optional"/>
                                                <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="CAT/LB on correct side"
                                                                            InvalidText="CAT/LB detected on the left side"
                                                                            InvalidSlots="{Binding InvalidCateringDoorsAndLoadingBays}"
                                                                            ShowEye="True" 
                                                                            ShowProblemsChanged="CateringAndLoadingBays_ShowProblemsChanged"
                                                                            ShowProblems="{Binding ShowCateringAndLoadingBayIssues}"
                                                                            IsValid="{Binding AreCateringAndLoadingBaysValid}" IsSevereProblem="False"
                                                                            Description="Catering doors and loading bays should face the right side of the layout (top side in the view)"/>
                                                <Separator Margin="0,4"/>
                                                <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="Service start- and endpoints are valid"
                                                                            InvalidText="Invalid service points!"
                                                                            IsValid="{Binding AreServicePointsValid}"
                                                                            Description="Each service start point (&lt;) also requires an end point (&gt;) in the same row"/>
                                                <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="All seat rows covered by service"
                                                                            InvalidText="Some rows aren't covered by service!"
                                                                            IsValid="{Binding AreSeatsReachableByService}" IsSevereProblem="False"
                                                                            IsRequired="{Binding AreKitchensValid}"
                                                                            NotRequiredText="No service coverage required (no kitchen)"
                                                                            Description="In case you have a kitchen on this deck, make sure to cover all rows with the service start- and endpoints"/>
                                                <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="Valid galley count"
                                                                            InvalidText="Insufficient galley seats for servicing!"
                                                                            IsValid="{Binding AreGalleysValid}"
                                                                            Description="Make sure to have at least as many galley seats on this deck as there are service areas (denoted by &lt; and &gt;)"/>
                                                <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="Kitchen accessible (In-Flight services available)"
                                                                            InvalidText="No kitchen available! (No In-Flight services)"
                                                                            IsValid="{Binding AreKitchensValid}" IsSevereProblem="False"
                                                                            Description="If you wanna be able to offer in-flight services, make sure to place down a kitchen"/>
                                                <Separator Margin="0,4"/>
                                                <controls:LayoutProblemText DockPanel.Dock="Top" ValidText="Toilets available"
                                                                            InvalidText="No toilets on this deck!"
                                                                            IsValid="{Binding AreToiletsAvailable}" IsSevereProblem="False"
                                                                            Description="In order to satisfy the needs of your passengers, one or more toilets are required"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                            </DataGrid.Columns>
                        </DataGrid>
                    </StackPanel>
                </ScrollViewer>
            </controls:RefinedExpander>
        </DockPanel>
        <Border Width="1" Background="{StaticResource DisabledColorBrush}"/>
        <Grid>
            <Grid IsEnabled="{Binding SelectedCabinLayout, Converter={StaticResource NotNullToBooleanConverter}}">
                <Grid.Style>
                    <Style TargetType="Grid">
                        <Setter Property="Effect" Value="{x:Null}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsLoadingLayout}" Value="True">
                                <Setter Property="Effect" Value="{StaticResource DisableBlur}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
                <controls:CabinLayoutControl x:Name="control_layout" IsEnabled="{Binding SelectedCabinLayout, Converter={StaticResource NotNullToBooleanConverter}}"
                                             CabinLayout="{Binding SelectedCabinLayout, UpdateSourceTrigger=PropertyChanged}"
                                             SelectedSlotsChanged="CabinLayout_SelectedSlotsChanged"
                                             Changed="CabinLayoutChanged"
                                             TemplatingModeToggled="TemplatingModeToggled">
                </controls:CabinLayoutControl>
                <Border VerticalAlignment="Bottom" CornerRadius="12,12,0,0"
                        HorizontalAlignment="Center" MinWidth="500"
                        Background="{DynamicResource BackgroundDarkBrush}">
                    <Border.Style>
                        <Style TargetType="Border">
                            <Setter Property="Margin" Value="0,0,0,0"/>
                            <Setter Property="Padding" Value="12,8"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=control_layout, Path=IsHorizontalScrollBarVisible, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                    <Setter Property="Margin" Value="0,0,0,7"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ElementName=control_layout, Path=IsTemplatingMode, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                    <Setter Property="BorderBrush" Value="{DynamicResource TemplatingModeBrush}"/>
                                    <Setter Property="BorderThickness" Value="1.5,1.5,1.5,0"/>
                                    <Setter Property="Padding" Value="10.5,8"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Border.Style>
                    <StackPanel>
                        <StackPanel Visibility="{Binding IsSingleCabinSlotSelected, Converter={StaticResource InverseBooleanToVisibilityConverter}}">
                            <StackPanel Orientation="Horizontal">
                                <TextBlock FontSize="16">
                                    <Run Text="{Binding SelectedCabinSlots.Count, Mode=OneWay, StringFormat={}Multi-slot configuration ({0} selected slots}"/>
                                    <Run Text="{Binding SelectedFloorText, Mode=OneWay, StringFormat={}on {0})}"/>
                                </TextBlock>
                            </StackPanel>
                            <UniformGrid Rows="1">
                                <!--<UniformGrid.Style>
                        <Style TargetType="UniformGrid">
                            <Setter Property="Columns" Value="3"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding SelectedAutomationIndex}" Value="0">
                                    <Setter Property="Columns" Value="4"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </UniformGrid.Style>-->
                                <StackPanel Margin="4">
                                    <TextBlock Text="Slot type" Margin="0,0,0,4"/>
                                    <ComboBox ItemsSource="{Binding Source={enum:EnumBindingSource {x:Type enum:CabinSlotType}}}"
                                                              SelectedIndex="{Binding SelectedMultiSlotTypeIndex}"
                                                              SelectionChanged="MultiSelect_SlotTypeSelectionChanged"
                                              Style="{StaticResource TopListComboBoxStyle}"/>
                                </StackPanel>
                                <StackPanel Margin="4">
                                    <TextBlock Text="Automation" Margin="0,0,0,4"/>
                                    <ComboBox SelectedIndex="{Binding SelectedAutomationIndex}"
                                              Style="{StaticResource TopListComboBoxStyle}">
                                        <ComboBoxItem Content="Seat numeration" ToolTip="Sets numeration and letters automatically for you"/>
                                        <ComboBoxItem Content="Auto walls" ToolTip="Automatically sets walls around your layout"/>
                                        <ComboBoxItem Content="Service points" Visibility="Collapsed"/>
                                    </ComboBox>
                                </StackPanel>
                                <StackPanel Margin="4" ToolTip="When modifying multiple rows, split letters with ,"
                                            Visibility="{Binding SelectedAutomationIndex, Converter={StaticResource EqualsToVisibilityConverter}, ConverterParameter=0}">
                                    <TextBlock Margin="0,0,0,4" Text="Seat letter(s)"/>
                                    <TextBox Text="{Binding AutomationSeatLetters, UpdateSourceTrigger=PropertyChanged}"/>
                                </StackPanel>
                                <StackPanel Margin="4" ToolTip="With which number should the automation start when numbering seats"
                                            Visibility="{Binding SelectedAutomationIndex, Converter={StaticResource EqualsToVisibilityConverter}, ConverterParameter=0}">
                                    <TextBlock Margin="0,0,0,4" Text="Starting number"/>
                                    <TextBox Text="{Binding AutomationSeatStartNumber, UpdateSourceTrigger=PropertyChanged}"/>
                                </StackPanel>
                                <StackPanel Margin="4" Visibility="{Binding SelectedAutomationIndex, Converter={StaticResource EqualsToVisibilityConverter}, ConverterParameter=1}">
                                    <TextBlock Margin="0,0,0,4" Text="Target deck"/>
                                    <ComboBox ItemsSource="{Binding SelectedCabinLayout.CabinDecks}" DisplayMemberPath="Floor"
                                              Style="{StaticResource TopListComboBoxStyle}"/>
                                </StackPanel>
                                <Button Margin="4" Content="Automate" Click="Automate_Click">
                                    <Button.Style>
                                        <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding SelectedAutomationIndex}" Value="-1">
                                                    <Setter Property="IsEnabled" Value="False"/>
                                                </DataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding SelectedAutomationIndex}" Value="0"/>
                                                        <Condition Binding="{Binding AutomationLettersValid}"
                                                       Value="False">
                                                        </Condition>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="IsEnabled" Value="False"/>
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Button.Style>
                                </Button>
                            </UniformGrid>
                        </StackPanel>
                        <StackPanel Visibility="{Binding IsSingleCabinSlotSelected, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="Single slot configuration " Style="{StaticResource Title3TextStyle}"/>
                                <TextBlock Visibility="{Binding SelectedCabinSlot, Converter={StaticResource NotNullToVisibilityConverter}}"
                                       Style="{StaticResource Title3TextStyle}">
                                    <Run Text="{Binding SelectedFloorText, Mode=OneWay, StringFormat={}({0}}"/><Run Text=","/>
                                    <Run Text="{Binding SelectedCabinSlot.Row, StringFormat={}Row {0}, Converter={StaticResource OffsetConverter}, ConverterParameter=1}"/><Run Text=","/>
                                    <Run Text="{Binding SelectedCabinSlot.Column, StringFormat={}Column {0}, Converter={StaticResource OffsetConverter}, ConverterParameter=1}"/>
                                </TextBlock>
                            </StackPanel>
                            <UniformGrid Rows="1" Margin="4,0">
                                <StackPanel Margin="4">
                                    <TextBlock Text="Slot type" Margin="0,0,0,4"/>
                                    <ComboBox ItemsSource="{Binding Source={enum:EnumBindingSource {x:Type enum:CabinSlotType}}}"
                                              SelectedIndex="{Binding SelectedCabinSlotTypeId}"
                                              SelectionChanged="ComboBox_SelectionChanged"
                                              Style="{StaticResource TopListComboBoxStyle}"/>
                                </StackPanel>
                                <StackPanel Margin="4">
                                    <DockPanel>
                                        <TextBlock DockPanel.Dock="Right"
                                       Visibility="{Binding SelectedCabinSlot.HasSlotNumber, Converter={StaticResource BooleanToVisibilityConverter}}"
                                       Text="{Binding SelectedCabinSlot.MaxSlotNumber, Mode=OneWay, StringFormat={}(max. {0})}"/>
                                        <TextBlock Margin="0,0,0,4">
                                            <TextBlock.Style>
                                                <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                                    <Setter Property="Text" Value="Seat number"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding SelectedCabinSlot.IsDoor, UpdateSourceTrigger=PropertyChanged}" 
                                                             Value="True">
                                                            <Setter Property="Text" Value="Door number"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBlock.Style>
                                        </TextBlock>
                                    </DockPanel>
                                    <TextBox Text="{Binding SelectedCabinSlot.SlotNumber, UpdateSourceTrigger=PropertyChanged}" 
                                             IsEnabled="{Binding SelectedCabinSlot.HasSlotNumber, UpdateSourceTrigger=PropertyChanged, FallbackValue=False, TargetNullValue=False}"/>
                                </StackPanel>
                                <StackPanel Margin="4">
                                    <TextBlock Margin="0,0,0,4" Text="Seat letter"/>
                                    <TextBox Text="{Binding SelectedCabinSlot.SeatLetter, UpdateSourceTrigger=PropertyChanged}" 
                                             IsEnabled="{Binding SelectedCabinSlot.IsSeat, UpdateSourceTrigger=PropertyChanged, FallbackValue=False, TargetNullValue=False}"/>
                                </StackPanel>
                            </UniformGrid>
                        </StackPanel>
                    </StackPanel>
                </Border>
                <Button HorizontalAlignment="Right" VerticalAlignment="Bottom" Click="SaveLayout_Click"
                        Content="{StaticResource Save}" ToolTip="Save your changes">
                    <Button.Style>
                        <Style TargetType="Button" BasedOn="{StaticResource FilledLargeIconButton}">
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ElementName=control_layout, Path=IsHorizontalScrollBarVisible, UpdateSourceTrigger=PropertyChanged}" Value="True"/>
                                        <Condition Binding="{Binding ElementName=control_layout, Path=IsVerticalScrollBarVisible, UpdateSourceTrigger=PropertyChanged}" Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Margin" Value="16,16,16,23"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ElementName=control_layout, Path=IsHorizontalScrollBarVisible, UpdateSourceTrigger=PropertyChanged}" Value="False"/>
                                        <Condition Binding="{Binding ElementName=control_layout, Path=IsVerticalScrollBarVisible, UpdateSourceTrigger=PropertyChanged}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Margin" Value="16,16,23,16"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ElementName=control_layout, Path=IsHorizontalScrollBarVisible, UpdateSourceTrigger=PropertyChanged}" Value="True"/>
                                        <Condition Binding="{Binding ElementName=control_layout, Path=IsVerticalScrollBarVisible, UpdateSourceTrigger=PropertyChanged}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Margin" Value="16,16,23,23"/>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
            </Grid>
            <Border Background="{DynamicResource BackdropColorBrush}"
                    Visibility="{Binding IsLoadingLayout, Converter={StaticResource BooleanToVisibilityConverter}}">
                <StackPanel VerticalAlignment="Center" HorizontalAlignment="Stretch" Margin="16">
                    <TextBlock Style="{StaticResource Title1TextStyle}" HorizontalAlignment="Center">
                        <Run Text="Loading cabin layout &quot;"/><Run Text="{Binding SelectedCabinLayout.LayoutName}"/><Run Text="&quot;"/>
                    </TextBlock>
                    <ProgressBar IsIndeterminate="True" Margin="0,8" Visibility="Collapsed"/>
                </StackPanel>
            </Border>
        </Grid>
    </DockPanel>
</Grid>
