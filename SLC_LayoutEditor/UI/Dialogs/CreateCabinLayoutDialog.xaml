<local:CreateDialogBase x:Class="SLC_LayoutEditor.UI.Dialogs.CreateCabinLayoutDialog"
           xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
           xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
           xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
           xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
           xmlns:local="clr-namespace:SLC_LayoutEditor.UI.Dialogs"
           xmlns:controls="clr-namespace:SLC_LayoutEditor.Controls"
           xmlns:vm="clr-namespace:SLC_LayoutEditor.ViewModel"
           mc:Ignorable="d" 
           MinHeight="170" MinWidth="300" LastChildFill="False"
           Loaded="DockPanel_Loaded">
    <local:CreateDialogBase.DataContext>
        <vm:CreateCabinLayoutDialogViewModel/>
    </local:CreateDialogBase.DataContext>
    <TextBlock DockPanel.Dock="Top" Margin="4">
        <TextBlock.Style>
            <Style TargetType="TextBlock" BasedOn="{StaticResource Title1TextStyle}">
                <Setter Property="Text" Value="Create a new cabin layout"/>
                <Style.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsTemplate}" Value="True"/>
                            <Condition Binding="{Binding IsSaveAs}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Text" Value="Create a new template"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsTemplate}" Value="False"/>
                            <Condition Binding="{Binding IsSaveAs}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Text" Value="Save cabin layout as"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsTemplate}" Value="True"/>
                            <Condition Binding="{Binding IsSaveAs}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Text" Value="Save template as"/>
                    </MultiDataTrigger>
                </Style.Triggers>
            </Style>
        </TextBlock.Style>
    </TextBlock>
    <TextBlock DockPanel.Dock="Top" Margin="8,8,8,4">
        <TextBlock.Style>
            <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                <Setter Property="Text" Value="Layout name"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsTemplate}" Value="True">
                        <Setter Property="Text" Value="Template name"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </TextBlock.Style>
    </TextBlock>
    <TextBox x:Name="input" DockPanel.Dock="Top" Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Margin="8,0"
             KeyUp="input_KeyUp"/>
    <TextBlock DockPanel.Dock="Top" Style="{StaticResource DialogErrorTextStyle}" Text="{Binding ErrorMessage, UpdateSourceTrigger=PropertyChanged}"/>
    <controls:RefinedExpander DockPanel.Dock="Top" Margin="8,0,8,16"
                              Header="Create from a template (optional)"
                              Visibility="{Binding HasTemplates, Converter={StaticResource BooleanToVisibilityConverter}}">
        <StackPanel Margin="12,0,12,12">
            <controls:RefinedComboBox DockPanel.Dock="Top" ItemsSource="{Binding Templates}"
                  SelectedItem="{Binding SelectedTemplate}">
                <controls:RefinedComboBox.ItemContainerStyle>
                    <Style TargetType="ComboBoxItem" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsDefault}" Value="True">
                                <Setter Property="FontStyle" Value="Italic"/>
                                <Setter Property="Foreground" Value="{DynamicResource ForegroundSecondaryColorBrush}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </controls:RefinedComboBox.ItemContainerStyle>
            </controls:RefinedComboBox>

            <DockPanel Margin="0,8,0,4" IsEnabled="{Binding IsTemplateSelected}"
                       Visibility="{Binding SelectedTemplate.IsDefault, Converter={StaticResource InverseBooleanToVisibilityConverter}}">
                <ComboBox DockPanel.Dock="Right" ItemsSource="{Binding SelectedTemplate.DeckNames}"
                          SelectedIndex="{Binding SelectedDeckThumbnailIndex}"
                          IsEnabled="{Binding HasTemplateThumbnails}"
                          Visibility="{Binding HasTemplateMultipleDecks, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                <TextBlock VerticalAlignment="Center" Margin="0,0,8,0" FontWeight="SemiBold"
                           Text="Preview"/>
            </DockPanel>
            <Border Background="{DynamicResource BackgroundColorBrush}" BorderThickness="1.5"
                    CornerRadius="4" Margin="-16,0,-14,-14"
                    Visibility="{Binding SelectedTemplate.IsDefault, Converter={StaticResource InverseBooleanToVisibilityConverter}}">
                <Grid>
                    <Image Source="{Binding SelectedDeckThumbnail}" Height="180" Stretch="Uniform"/>
                    <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                        <TextBlock FontSize="16" FontWeight="SemiBold" Foreground="{DynamicResource ForegroundSecondaryColorBrush}">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HasTemplateThumbnails}" Value="False">
                                            <Setter Property="Text" Value="Preview unavailable (no thumbnails)"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsTemplateSelected}" Value="False">
                                            <Setter Property="Text" Value="Select a template"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                        <Button Margin="8" HorizontalAlignment="Center" Style="{StaticResource WarnIconButtonStyle}"
                                Content="{StaticResource Refresh}" ToolTip="Generate thumbnail"
                                Click="GenerateThumbnail_Click"
                                Visibility="{Binding SelectedTemplate.HasThumbnails, Converter={StaticResource InverseBooleanToVisibilityConverter}}"/>
                    </StackPanel>
                </Grid>
            </Border>
        </StackPanel>
    </controls:RefinedExpander>

    <StackPanel Orientation="Horizontal" DockPanel.Dock="Bottom"
                HorizontalAlignment="Right">
        <Button Content="Create" Width="80" Margin="8" IsEnabled="{Binding IsValid, UpdateSourceTrigger=PropertyChanged}"
                Click="Create_Click">
            <Button.Style>
                <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                    <Setter Property="Content" Value="Create"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsSaveAs}" Value="True">
                            <Setter Property="Content" Value="Save"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
        </Button>
        <Button Content="Cancel" Width="80" Margin="8" Click="Cancel_Click"
                Style="{StaticResource YellowButtonStyle}"/>
    </StackPanel>
</local:CreateDialogBase>
