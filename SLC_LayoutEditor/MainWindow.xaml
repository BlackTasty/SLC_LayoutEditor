<Window x:Class="SLC_LayoutEditor.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:controls="clr-namespace:SLC_LayoutEditor.Controls"
        xmlns:vm="clr-namespace:SLC_LayoutEditor.ViewModel"
        xmlns:dvm="clr-namespace:SLC_LayoutEditor.ViewModel.DesignTime"
        xmlns:notifications="clr-namespace:SLC_LayoutEditor.Controls.Notifications"
        TextElement.Foreground="{DynamicResource ForegroundColorBrush}"
        Background="{DynamicResource BackgroundDarkBrush}"
        BorderBrush="{DynamicResource BackgroundLightBrush}"
        mc:Ignorable="d" Closing="Window_Closing" WindowStyle="SingleBorderWindow"
        Title="{Binding Title}" MinHeight="810" MinWidth="1260"
        d:DataContext="{d:DesignInstance {x:Type dvm:MainDesignViewModel}, IsDesignTimeCreatable=True}"
        Icon="Resources/icon.ico" StateChanged="Window_StateChanged">
    <WindowChrome.WindowChrome>
        <WindowChrome GlassFrameThickness="0" CornerRadius="14" CaptionHeight="0" UseAeroCaptionButtons="False" ResizeBorderThickness="7"/>
    </WindowChrome.WindowChrome>
    <Window.Template>
        <ControlTemplate TargetType="Window">
            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2" CornerRadius="8" Name="MainBorder" Background="{TemplateBinding Background}">
                <Grid>
                    <Grid.Style>
                        <Style TargetType="Grid">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsMaximized}" Value="True">
                                    <Setter Property="Margin" Value="6,4"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Style>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="40"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <DockPanel Loaded="header_Loaded" Background="Transparent">
                        <Button DockPanel.Dock="Right" Click="Close_Click" Style="{StaticResource HeaderCloseButtonStyle}"
                                Content="{StaticResource Close}" ToolTip="Close"/>
                        <Button DockPanel.Dock="Right" Click="ToggleState_Click"
                                Content="{Binding StateToggleButtonContent}">
                            <Button.Style>
                                <Style TargetType="Button" BasedOn="{StaticResource HeaderButtonStyle}">
                                    <Setter Property="ToolTip" Value="Maximize window"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsMaximized}" Value="True">
                                            <Setter Property="ToolTip" Value="Restore window"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                        <Button DockPanel.Dock="Right" Click="Minimize_Click" Style="{StaticResource HeaderButtonStyle}"
                                Content="{StaticResource WindowMinimize}" Padding="17" ToolTip="Minimize"/>
                        <Button Content="Return to editor" Click="ReturnToEditor_Click" FontSize="12"
                                DockPanel.Dock="Right" Margin="24,0,24,0"
                                Visibility="{Binding IsViewNotEditor, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        <controls:Updater DockPanel.Dock="Right" Margin="32,0,8,0" InstallUpdateClicked="Updater_InstallUpdateClicked"/>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="{TemplateBinding Title}" Style="{StaticResource Title3TextStyle}"
                                       Margin="8,0" VerticalAlignment="Center"/>
                            <Menu Foreground="{StaticResource ForegroundColorBrush}" FontSize="14" VerticalAlignment="Center"
                                  IsEnabled="{Binding IsDialogOpen, Converter={StaticResource InverseBooleanConverter}}">
                                <MenuItem
                                          IsEnabled="{Binding IsGuideOpen, Converter={StaticResource InverseBooleanConverter}}">
                                    <MenuItem.Style>
                                        <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                            <Setter Property="Header" Value="Layout"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding EditorViewModel.IsLayoutTemplate}" Value="True">
                                                    <Setter Property="Header" Value="Template"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </MenuItem.Style>
                                    <MenuItem Command="{Binding RenameLayoutCommand}" 
                                      CommandParameter="{Binding EditorViewModel}" InputGestureText="Ctrl+R">
                                        <MenuItem.Style>
                                            <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                <Setter Property="Header" Value="Rename layout"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding EditorViewModel.IsLayoutTemplate}" Value="True">
                                                        <Setter Property="Header" Value="Rename template"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </MenuItem.Style>
                                    </MenuItem>
                                    <MenuItem Header="Save" Command="{Binding SaveLayoutCommand}" 
                                      CommandParameter="{Binding EditorViewModel}" InputGestureText="Ctrl+S"/>
                                    <MenuItem Header="Save as..." Command="{Binding SaveLayoutAsCommand}" 
                                      CommandParameter="{Binding EditorViewModel}" InputGestureText="Ctrl+Shift+S"/>
                                    <Separator Style="{StaticResource MenuSeparatorStyle}"/>
                                    <MenuItem Header="Make into template" Command="{Binding MakeTemplateCommand}"
                                              CommandParameter="{Binding EditorViewModel}" InputGestureText="Ctrl+T"/>
                                    <MenuItem Command="{Binding ReloadLayoutCommand}"
                                              CommandParameter="{Binding EditorViewModel}" InputGestureText="Ctrl+Alt+R">
                                        <MenuItem.Style>
                                            <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                <Setter Property="Header" Value="Reload layout"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding EditorViewModel.IsLayoutTemplate}" Value="True">
                                                        <Setter Property="Header" Value="Reload template"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </MenuItem.Style>
                                    </MenuItem>
                                    <MenuItem Header="Open layout file" Command="{Binding OpenLayoutInTextEditor}" 
                                              CommandParameter="{Binding EditorViewModel}" InputGestureText="Ctrl+O"
                                              Visibility="{Binding EditorViewModel.IsLayoutTemplate, Converter={StaticResource InverseBooleanToVisibilityConverter}}"/>
                                    <MenuItem Header="Open in explorer" Command="{Binding OpenLayoutFolderCommand}" 
                                              CommandParameter="{Binding EditorViewModel}" InputGestureText="Ctrl+E"
                                              Visibility="{Binding EditorViewModel.IsLayoutTemplate, Converter={StaticResource InverseBooleanToVisibilityConverter}}"/>
                                </MenuItem>
                                <MenuItem Header="Editor"
                                          IsEnabled="{Binding IsGuideOpen, Converter={StaticResource InverseBooleanConverter}}">
                                    <MenuItem Header="Settings" Click="Settings_Click"/>
                                    <MenuItem Header="Welcome screen" Click="OpenWelcomeScreen_Click"/>
                                    <Separator Style="{StaticResource MenuSeparatorStyle}"/>
                                    <MenuItem Header="Search for updates" Click="SearchUpdates_Click" 
                                              IsEnabled="{Binding IsSearching, Converter={StaticResource InverseBooleanConverter}}"/>
                                </MenuItem>
                                <MenuItem Header="Help">
                                    <MenuItem Click="ToggleGuide_Click">
                                        <MenuItem.Style>
                                            <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                <Setter Property="Header" Value="Start tour"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding IsTourRunning}" Value="True">
                                                        <Setter Property="Header" Value="Cancel tour"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </MenuItem.Style>
                                    </MenuItem>
                                    <MenuItem Header="Show keybinds" Command="{Binding ShowKeybindsWindowCommand}"
                                              InputGestureText="Ctrl+K"
                                              IsEnabled="{Binding IsGuideOpen, Converter={StaticResource InverseBooleanConverter}}"/>
                                    <Separator Style="{StaticResource MenuSeparatorStyle}"/>
                                    <MenuItem Header="What's new?" Click="Changelog_Click"
                                              IsEnabled="{Binding IsGuideOpen, Converter={StaticResource InverseBooleanConverter}}"/>
                                    <MenuItem Header="Roadmap" Click="Roadmap_Click"
                                              IsEnabled="{Binding IsGuideOpen, Converter={StaticResource InverseBooleanConverter}}"/>
                                </MenuItem>
                            </Menu>
                            <Border Width="1.5" Background="{StaticResource SeparatorColorBrush}" Margin="8,6,12,6" CornerRadius="1"/>

                            <StackPanel Orientation="Horizontal" Margin="0,0,12,0" x:Name="panel_historyButtons">
                                <StackPanel.Style>
                                    <Style TargetType="StackPanel">
                                        <Setter Property="IsEnabled" Value="False"/>
                                        <Style.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsLayoutOpened}" Value="True"/>
                                                    <Condition Binding="{Binding IsDialogOpen}" Value="False"/>
                                                    <Condition Binding="{Binding IsGuideOpen}" Value="False"/>
                                                    <Condition Binding="{Binding IsViewNotEditor}" Value="False"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="IsEnabled" Value="True"/>
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </StackPanel.Style>
                                <Button x:Name="btn_undo" Style="{StaticResource DefaultIconButtonStyle}" Content="{StaticResource Undo}" Margin="4,0" ToolTip="Undo"
                                        Click="Undo_Click" IsEnabled="{Binding CanUndo}" Loaded="UndoButton_Loaded"/>
                                <Button x:Name="btn_redo" Style="{StaticResource DefaultIconButtonStyle}" Content="{StaticResource Redo}" Margin="4,0" ToolTip="Redo"
                                        Click="Redo_Click" IsEnabled="{Binding CanRedo}" Loaded="RedoButton_Loaded"/>
                            </StackPanel>
                            <Border Margin="0,6,8,6" Padding="8,2" CornerRadius="4"
                                        Visibility="{Binding CabinLayoutName, Converter={StaticResource NotNullToVisibilityConverter}}">
                                <Border.Style>
                                    <Style TargetType="Border">
                                        <Setter Property="Background" Value="{StaticResource BackgroundLightBrush}"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding IsTemplate, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                                <Setter Property="Background" Value="{StaticResource TemplatingModeBrush}"/>
                                                <Setter Property="TextElement.Foreground" Value="Black"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Border.Style>
                                <TextBlock VerticalAlignment="Center" FontWeight="SemiBold">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsTemplate, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                                    <Setter Property="Foreground" Value="Black"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                    <Run Text="{Binding CabinLayoutName, Mode=OneWay}">
                                        <Run.Style>
                                            <Style TargetType="Run">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding HasUnsavedChanges}" Value="True">
                                                        <Setter Property="FontStyle" Value="Italic"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Run.Style>
                                    </Run>
                                    <Run>
                                        <Run.Style>
                                            <Style TargetType="Run">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding HasUnsavedChanges}" Value="True">
                                                        <Setter Property="Text" Value="*"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Run.Style>
                                    </Run>
                                </TextBlock>
                            </Border>
                            <StackPanel x:Name="panel_guideStepper" VerticalAlignment="Center" Orientation="Horizontal"
                                        Visibility="{Binding IsTourRunning, Converter={StaticResource BooleanToVisibilityConverter}}">
                                <Button Style="{StaticResource DefaultIconButtonStyle}" Content="{StaticResource ChevronLeftData}"
                                        IsEnabled="{Binding IsNotFirstTourStep}" Click="StepBackInTour_Click"
                                        ToolTip="Show previous step"/>
                                <TextBlock VerticalAlignment="Center" Margin="8,0,8,1" FontSize="13"
                                           Foreground="{StaticResource WarnForegroundColorBrush}"
                                           FontWeight="SemiBold">
                                    <Run Text="Guided tour -"/>
                                    <Run Text="{Binding TourStepCategory, Mode=OneWay}"/>
                                    <Run Text="{Binding CurrentTourStep, Mode=OneWay, StringFormat={}({0}/}"/><Run Text="{Binding MaxSteps, Mode=OneWay, StringFormat={}{0})}"/>
                                </TextBlock>
                                <Button Style="{StaticResource DefaultIconButtonStyle}" Content="{StaticResource EyeOutline}"
                                        Click="ShowCurrentStep_Click"
                                        IsEnabled="{Binding IsGuideOpen, Converter={StaticResource InverseBooleanConverter}}"
                                        ToolTip="Show current step again" Margin="0,0,8,0"/>
                                <Button Style="{StaticResource DefaultIconButtonStyle}" Content="{StaticResource ChevronRightData}"
                                        IsEnabled="{Binding IsNotLatestTourStep}" Click="StepForwardInTour_Click"
                                        ToolTip="Show next step"/>
                            </StackPanel>
                        </StackPanel>
                    </DockPanel>
                    <AdornerDecorator ClipToBounds="True" Grid.Row="1">
                        <ContentPresenter Loaded="Root_Loaded" Margin="2,4,0,0"/>
                    </AdornerDecorator>
                </Grid>
            </Border>
        </ControlTemplate>
    </Window.Template>
    <Window.DataContext>
        <vm:MainViewModel/>
    </Window.DataContext>
    <Window.InputBindings>
        <!-- Basic commands -->
        <KeyBinding Key="E" Modifiers="Ctrl" Command="{Binding OpenLayoutFolderCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="O" Modifiers="Ctrl" Command="{Binding OpenLayoutInTextEditor}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="S" Modifiers="Ctrl" Command="{Binding SaveLayoutCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="S" Modifiers="Ctrl+Shift" Command="{Binding SaveLayoutAsCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="A" Modifiers="Ctrl+Shift" Command="{Binding SelectAllSlotsCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="T" Modifiers="Ctrl" Command="{Binding MakeTemplateCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="R" Modifiers="Ctrl" Command="{Binding RenameLayoutCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="R" Modifiers="Ctrl+Alt" Command="{Binding ReloadLayoutCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="A" Modifiers="Ctrl" Command="{Binding SelectAllSlotsOnDeckCommand}" CommandParameter="{Binding SelectedDeck}"/>
        <KeyBinding Key="K" Modifiers="Ctrl" Command="{Binding ShowKeybindsWindowCommand}"/>
        <KeyBinding Key="Z" Modifiers="Ctrl" Command="{Binding UndoCommand}" CommandParameter="{Binding}"/>
        <KeyBinding Key="Y" Modifiers="Ctrl" Command="{Binding RedoCommand}" CommandParameter="{Binding}"/>

        <!-- Dialog commands -->
        <KeyBinding Key="Esc" Command="{Binding CancelDialogCommand}" CommandParameter="{Binding Dialog}"/>
        
        <!-- Slot type commands -->
        <KeyBinding Key="A" Modifiers="Alt" Command="{Binding SlotTypeAisleCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="W" Modifiers="Alt" Command="{Binding SlotTypeWallCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="D" Modifiers="Ctrl+Alt" Command="{Binding SlotTypeDoorCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="L" Modifiers="Ctrl+Alt" Command="{Binding SlotTypeLoadingBayCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="C" Modifiers="Ctrl+Alt" Command="{Binding SlotTypeCateringDoorCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="C" Modifiers="Alt" Command="{Binding SlotTypeCockpitCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="G" Modifiers="Alt" Command="{Binding SlotTypeGalleyCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="T" Modifiers="Alt" Command="{Binding SlotTypeToiletCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="K" Modifiers="Alt" Command="{Binding SlotTypeKitchenCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="I" Modifiers="Alt" Command="{Binding SlotTypeIntercomCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="S" Modifiers="Alt" Command="{Binding SlotTypeStairwayCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="D1" Modifiers="Alt" Command="{Binding SlotTypeEconomyClassCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="D2" Modifiers="Alt" Command="{Binding SlotTypeBusinessClassCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="D3" Modifiers="Alt" Command="{Binding SlotTypePremiumClassCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="D4" Modifiers="Alt" Command="{Binding SlotTypeFirstClassCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="D5" Modifiers="Alt" Command="{Binding SlotTypeSupersonicClassCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="D0" Modifiers="Alt" Command="{Binding SlotTypeUnavailableSeatCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="OemComma" Modifiers="Alt" Command="{Binding SlotTypeServiceStartCommand}" CommandParameter="{Binding EditorViewModel}"/>
        <KeyBinding Key="OemPeriod" Modifiers="Alt" Command="{Binding SlotTypeServiceEndCommand}" CommandParameter="{Binding EditorViewModel}"/>
    </Window.InputBindings>
    <Grid>
        <DockPanel>
            <DockPanel.Style>
                <Style TargetType="DockPanel">
                    <Setter Property="Effect" Value="{x:Null}"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsDialogOpen}" Value="True">
                            <Setter Property="Effect" Value="{StaticResource DisableBlur}"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DockPanel.Style>
            <ContentPresenter Content="{Binding Content}"/>
        </DockPanel>
        <notifications:NotificationBar HorizontalAlignment="Right" Panel.ZIndex="100" Margin="0,48,0,96"/>
        <Grid Background="{StaticResource BackdropColorBrush}"
              Visibility="{Binding IsDialogOpen, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Border BorderBrush="{DynamicResource ButtonBorderColorBrush}" BorderThickness="2" CornerRadius="8"
                    Background="{StaticResource BackgroundColorBrush}" UseLayoutRounding="True"
                    HorizontalAlignment="Center" VerticalAlignment="Center" Padding="4,4,4,0"
                    Margin="64">
                <ContentPresenter Content="{Binding Dialog}"/>
            </Border>
        </Grid>
    </Grid>
</Window>
