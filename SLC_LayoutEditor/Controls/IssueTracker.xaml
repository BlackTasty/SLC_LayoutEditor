<UserControl x:Class="SLC_LayoutEditor.Controls.IssueTracker"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:vm="clr-namespace:SLC_LayoutEditor.ViewModel"
             xmlns:local="clr-namespace:SLC_LayoutEditor.Controls"
             mc:Ignorable="d"
             local:GuideAssist.Title="{StaticResource GuideIssueTrackerTitle}"
             local:GuideAssist.Description="{StaticResource GuideIssueTrackerDescription}"
             local:GuideAssist.HasGuide="True"
             local:GuideAssist.IsCircularCutout="False"
             local:GuideAssist.RadiusOffset="-12"
             UseLayoutRounding="True"
             Cursor="Help">
    <UserControl.DataContext>
        <vm:LayoutEditorViewModel/>
    </UserControl.DataContext>
    <local:RefinedExpander IsEnabled="{Binding ActiveLayout, Converter={StaticResource NotNullToBooleanConverter}}"
                           Description="{Binding ActiveLayout.IssuesCountText}" ExpandDirection="Up"
                           IsExpanded="{Binding IsIssueTrackerExpanded}"
                           PlayAnimations="{Binding PlayExpanderAnimations}">
        <local:RefinedExpander.Style>
            <Style TargetType="local:RefinedExpander" BasedOn="{StaticResource {x:Type local:RefinedExpander}}">
                <Setter Property="DescriptionForeground" Value="{DynamicResource ButtonForegroundColorBrush}"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding ActiveLayout.HasMinorIssues}" Value="True">
                        <Setter Property="DescriptionForeground" Value="{DynamicResource WarnForegroundColorBrush}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding ActiveLayout.HasSevereIssues}" Value="True">
                        <Setter Property="DescriptionForeground" Value="{DynamicResource ErrorForegroundColorBrush}"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </local:RefinedExpander.Style>
        <Expander.Header>
            <TextBlock FontSize="16" Text="Issues" FontWeight="Bold" VerticalAlignment="Center">
                <TextBlock.Style>
                    <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                        <Style.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource DisabledColorBrush}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
        </Expander.Header>
        <ScrollViewer VerticalScrollBarVisibility="Visible" Padding="0,4" x:Name="list_scroll">
            <StackPanel Margin="12,4,4,4">
                <TextBlock Text="Issues across all decks" FontSize="18"/>
                <local:LayoutProblemText ValidText="No duplicate Economy Class seats"
                                         InvalidText="{Binding ActiveLayout.DuplicateEconomySeats.Count, StringFormat={}{0} duplicate Economy Class seats found!}"
                                         IsValid="{Binding ActiveLayout.HasNoDuplicateEconomySeats}"
                                         InvalidSlots="{Binding ActiveLayout.DuplicateEconomySeats}"
                                         ShowEye="True" ShowProblemsChanged="EconomyClass_ShowIssuesChanged"
                                         ShowProblems="{Binding ShowEconomyClassIssues}"/>

                <local:LayoutProblemText ValidText="No duplicate Business Class seats"
                                         InvalidText="{Binding ActiveLayout.DuplicateBusinessSeats.Count, StringFormat={}{0} duplicate Business Class seats found!}"
                                         IsValid="{Binding ActiveLayout.HasNoDuplicateBusinessSeats}"
                                         InvalidSlots="{Binding ActiveLayout.DuplicateBusinessSeats}"
                                         ShowEye="True" ShowProblemsChanged="BusinessClass_ShowIssuesChanged"
                                         ShowProblems="{Binding ShowBusinessClassIssues, UpdateSourceTrigger=PropertyChanged}"/>

                <local:LayoutProblemText ValidText="No duplicate Premium Class seats"
                                         InvalidText="{Binding ActiveLayout.DuplicatePremiumSeats.Count, StringFormat={}{0} duplicate Premium Class seats found!}"
                                         IsValid="{Binding ActiveLayout.HasNoDuplicatePremiumSeats}"
                                         InvalidSlots="{Binding ActiveLayout.DuplicatePremiumSeats}"
                                         ShowEye="True" ShowProblemsChanged="Premium_ShowIssuesChanged"
                                         ShowProblems="{Binding ShowPremiumClassIssues}"/>

                <local:LayoutProblemText ValidText="No duplicate First Class seats"
                                         InvalidText="{Binding ActiveLayout.DuplicateFirstClassSeats.Count, StringFormat={}{0} duplicate First Class seats found!}"
                                         IsValid="{Binding ActiveLayout.HasNoDuplicateFirstClassSeats}"
                                         InvalidSlots="{Binding ActiveLayout.DuplicateFirstClassSeats}"
                                         ShowEye="True" ShowProblemsChanged="FirstClass_ShowIssuesChanged"
                                         ShowProblems="{Binding ShowFirstClassIssues}"/>

                <local:LayoutProblemText ValidText="No duplicate Supersonic Class seats"
                                         InvalidText="{Binding ActiveLayout.DuplicateSupersonicSeats.Count, StringFormat={}{0} duplicate Supersonic Class seats found!}"
                                         IsValid="{Binding ActiveLayout.HasNoDuplicateSupersonicSeats}"
                                         InvalidSlots="{Binding ActiveLayout.DuplicateSupersonicSeats}"
                                         ShowEye="True" ShowProblemsChanged="SupersonicClass_ShowIssuesChanged"
                                         ShowProblems="{Binding ShowSupersonicClassIssues}"/>

                <local:LayoutProblemText ValidText="No duplicate Unavailable seats"
                                         InvalidText="{Binding ActiveLayout.DuplicateUnavailableSeats.Count, StringFormat={}{0} duplicate Unavailable Class seats found!}"
                                         IsValid="{Binding ActiveLayout.HasNoDuplicateUnavailableSeats}"
                                         InvalidSlots="{Binding ActiveLayout.DuplicateUnavailableSeats}"
                                         ShowEye="True" ShowProblemsChanged="UnavailableSeats_ShowIssuesChanged"
                                         ShowProblems="{Binding ShowUnavailableSeatsIssues}"/>

                <Separator Margin="0,4"/>
                <local:LayoutProblemText DockPanel.Dock="Top" ValidText="No duplicate doors"
                                         InvalidText="{Binding ActiveLayout.DuplicateDoors.Count, StringFormat={}{0} duplicate doors found!}"
                                         IsValid="{Binding ActiveLayout.HasNoDuplicateDoors}"
                                         InvalidSlots="{Binding ActiveLayout.DuplicateDoors}"
                                         ShowEye="True"
                                         ShowProblemsChanged="DuplicateDoors_ShowIssuesChanged"
                                         ShowProblems="{Binding ShowDuplicateDoorsIssues}"
                                         AutoFixTarget="{Binding ActiveLayout}"
                                         ShowAutoFix="True"
                                         AutoFixApplying="DuplicateDoors_AutoFixApplying"
                                         Description="Make sure that each door has a unique number across all decks"/>

                <local:LayoutProblemText ValidText="Stairway positions valid"
                                         InvalidText="{Binding StairwayErrorMessage}"
                                         IsValid="{Binding ActiveLayout.StairwaysValid}"
                                         InvalidSlots="{Binding ActiveLayout.InvalidStairways}"
                                         ShowEye="True" 
                                         ShowProblemsChanged="StairwayPositions_ShowIssuesChanged"
                                         ShowProblems="{Binding ShowStairwayIssues}"
                                         ShowAutoFix="True"
                                         AutoFixApplying="StairwayPositions_AutoFixApplying"
                                         AutoFixTarget="{Binding ActiveLayout}"
                                         Description="When using multiple decks and adding stairways, make sure to align them on the same x/y coordinate"
                                         NotRequiredText="No stairways required"
                                         IsRequired="{Binding ActiveLayout.HasMultipleDecks}"/>
                
                <TextBlock Text="Issues per deck" FontSize="18" Margin="0,16,0,0"/>
                <DataGrid ItemsSource="{Binding ActiveLayout.CabinDecks}"
                          PreviewMouseWheel="DeckProblemsList_PreviewMouseWheel"
                          Margin="0,0,0,0">
                    <DataGrid.Resources>
                        <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent" />
                        <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent" />
                        <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Transparent" />
                        <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Transparent" />
                        <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="Transparent"/>
                    </DataGrid.Resources>
                    <DataGrid.Columns>
                        <DataGridTemplateColumn>
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <StackPanel Visibility="{Binding CabinSlots, Converter={StaticResource NotNullToVisibilityConverter}}"
                                                Margin="0,0,0,12" Width="297">
                                        <TextBlock FontSize="16" DockPanel.Dock="Top" Margin="0,0,0,0"
                                                           Foreground="{DynamicResource ForegroundSecondaryColorBrush}">
                                            <TextBlock.Style>
                                                <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                                    <Setter Property="Text" Value="{Binding Floor, StringFormat={}Floor {0}}"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding Floor}" Value="1">
                                                            <Setter Property="Text" Value="Lower deck"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Floor}" Value="2">
                                                            <Setter Property="Text" Value="Upper deck"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBlock.Style>
                                        </TextBlock>
                                        <local:LayoutProblemText DockPanel.Dock="Top" ValidText="Deck slots valid"
                                                                 InvalidText="Invalid amount of deck slots!"
                                                                 IsValid="{Binding AreSlotsValid}"
                                                                 ShowAutoFix="True"
                                                                 AutoFixTarget="{Binding}"
                                                                 AutoFixApplying="Slots_AutoFixApplying"
                                                                 Description="This layout validator checks if your deck has &quot;holes&quot;, i.e. missing tiles"/>
                                        
                                        <local:LayoutProblemText DockPanel.Dock="Top" ValidText="Doors available"
                                                                 InvalidText="No doors for this deck!"
                                                                 IsValid="{Binding AreDoorsValid}"
                                                                 Description="Each deck needs at least one door. Also make sure that each layout has at least one loading bay, catering doors are optional"/>
                                        
                                        <local:LayoutProblemText DockPanel.Dock="Top" ValidText="CAT/LB on correct side"
                                                                 InvalidText="CAT/LB detected on the left side"
                                                                 InvalidSlots="{Binding InvalidCateringDoorsAndLoadingBays}"
                                                                 ShowEye="True" 
                                                                 ShowProblemsChanged="CateringAndLoadingBays_ShowIssuesChanged"
                                                                 ShowProblems="{Binding ShowCateringAndLoadingBayIssues}"
                                                                 IsValid="{Binding AreCateringAndLoadingBaysValid}" IsSevereProblem="False"
                                                                 Description="Catering doors and loading bays should face the right side of the layout (top side in the view)"/>
                                        <local:LayoutProblemText DockPanel.Dock="Top" ValidText="All slots are reachable"
                                                                 IsValid="{Binding AllSlotsReachable}"
                                                                 InvalidSlots="{Binding UnreachableSlots}"
                                                                 ShowEye="True" 
                                                                 ShowProblemsChanged="UnreachableSlots_ShowProblemsChanged"
                                                                 ShowProblems="{Binding ShowUnreachableSlots}"
                                                                 Description="If there are unreachable &quot;interactable&quot; slots (seats, intercoms, toilets, etc.), it will show up as an issue here">
                                            <local:LayoutProblemText.Style>
                                                <Style TargetType="local:LayoutProblemText">
                                                    <Setter Property="InvalidText" Value="{Binding UnreachableSlots.Count, StringFormat={}{0} unreachable slots detected!}"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding UnreachableSlots.Count}" Value="1">
                                                            <Setter Property="InvalidText" Value="1 unreachable slot detected!"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </local:LayoutProblemText.Style>
                                        </local:LayoutProblemText>

                                        <local:LayoutProblemText ValidText="All interior slots on valid positions"
                                                                 IsValid="{Binding AllInteriorSlotPositionsValid}"
                                                                 InvalidSlots="{Binding InvalidPositionedSlots}"
                                                                 ShowEye="True" 
                                                                 ShowProblemsChanged="InvalidPositionedSlots_ShowProblemsChanged"
                                                                 ShowProblems="{Binding ShowInteriorPositionIssues}"
                                                                 Description="Slot types like toilets, seats and so on can only be placed in the interior">
                                            <local:LayoutProblemText.Style>
                                                <Style TargetType="local:LayoutProblemText">
                                                    <Setter Property="InvalidText" Value="{Binding InvalidPositionedSlots.Count, StringFormat={}{0} invalid positioned interior slots!}"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding UnreachableSlots.Count}" Value="1">
                                                            <Setter Property="InvalidText" Value="1 invalid positioned interior slot!"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </local:LayoutProblemText.Style>
                                        </local:LayoutProblemText>
                                        <Separator Margin="0,4"/>
                                        <local:LayoutProblemText DockPanel.Dock="Top" ValidText="Service start- and endpoints are valid"
                                                                 InvalidText="Invalid service points!"
                                                                 IsValid="{Binding AreServicePointsValid}"
                                                                 Description="Each service start point (&lt;) also requires an end point (&gt;) in the same column"/>
                                        <local:LayoutProblemText DockPanel.Dock="Top" ValidText="All seat rows covered by service"
                                                                 InvalidText="Some rows aren't covered by service!"
                                                                 IsValid="{Binding AreSeatsReachableByService}"
                                                                 IsRequired="{Binding AreKitchensValid}"
                                                                 NotRequiredText="No service coverage required (no kitchen)"
                                                                 Description="In case you have a kitchen on this deck, make sure to cover all rows with the service start- and endpoints"/>
                                        <local:LayoutProblemText DockPanel.Dock="Top" ValidText="Valid galley count"
                                                                 InvalidText="Insufficient galley seats for servicing!"
                                                                 IsValid="{Binding AreGalleysValid}"
                                                                 Description="Make sure to have at least as many galley seats on this deck as there are service areas (denoted by &lt; and &gt;)"/>
                                        <local:LayoutProblemText DockPanel.Dock="Top" ValidText="Kitchen accessible (In-Flight services available)"
                                                                 InvalidText="No kitchen available! (No In-Flight services)"
                                                                 IsValid="{Binding AreKitchensValid}" IsSevereProblem="False"
                                                                 Description="If you wanna be able to offer in-flight services, make sure to place down a kitchen"/>
                                        <Separator Margin="0,4"/>
                                        <local:LayoutProblemText DockPanel.Dock="Top" ValidText="Toilets available"
                                                                 InvalidText="No toilets on this deck!"
                                                                 IsValid="{Binding AreToiletsAvailable}" IsSevereProblem="False"
                                                                 Description="In order to satisfy the needs of your passengers, one or more toilets are required"/>
                                    </StackPanel>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>
                </DataGrid>
            </StackPanel>
        </ScrollViewer>
    </local:RefinedExpander>
</UserControl>
