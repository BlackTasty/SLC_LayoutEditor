<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converter="clr-namespace:SLC_LayoutEditor.Converter"
                    xmlns:material="clr-namespace:SLC_LayoutEditor.Controls.Material">
    <converter:StringToGeometryConverter x:Key="StringToGeometryConverter"/>
    
    <Style TargetType="ToggleButton">
        <Setter Property="Background" Value="{DynamicResource ButtonBackgroundColorBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ButtonBorderColorBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderColorBrush}"/>
        <Setter Property="BorderThickness" Value="1.5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="500">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" 
                                          Content="{TemplateBinding Content}" 
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          Focusable="False" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" 
                                          RecognizesAccessKey="True" 
                                          TextElement.Foreground="{TemplateBinding Foreground}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{DynamicResource AccentBackColorBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource AccentPressedColorBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource AccentPressedColorBrush}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsChecked" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource AccentBackHoverColorBrush}"/>
                    <Setter Property="Foreground" Value="{DynamicResource AccentHoverColorBrush}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource AccentHoverColorBrush}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsChecked" Value="False"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderBrush" Value="{DynamicResource ButtonBackgroundHoverColorBrush}"/>
                    <Setter Property="Foreground" Value="{DynamicResource ButtonBorderHoverColorBrush}"/>
                    <Setter Property="Background" Value="{DynamicResource ButtonBorderHoverColorBrush}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True"/>
                    <Condition Property="IsChecked" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource AccentBackPressedColorBrush}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource AccentPressedColorBrush}"/>
                    <Setter Property="Foreground" Value="{DynamicResource AccentPressedColorBrush}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True"/>
                    <Condition Property="IsChecked" Value="False"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource ButtonBackgroundPressedColorBrush}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderPressedColorBrush}"/>
                    <Setter Property="Foreground" Value="{DynamicResource ButtonBorderPressedColorBrush}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource DisabledColorBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource DisabledColorBrush}"/>
                <Setter Property="Background" Value="{DynamicResource DisabledColorBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToggleDeckViewButtonStyle" TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Content" Value="{DynamicResource ShowAllDecks}"/>
        <Setter Property="ToolTip" Value="Show all decks"/>
        <Setter Property="Height" Value="36"/>
        <Setter Property="Width" Value="36"/>
        <Setter Property="Padding" Value="8"/>
        <Setter Property="Margin" Value="16,0"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type ToggleButton}">
                    <Path Name="path" Stretch="Uniform"
                          Fill="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=Foreground}"
                          Data="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=Content, Converter={StaticResource StringToGeometryConverter}}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Content" Value="{DynamicResource ShowOneDeck}"/>
                <Setter Property="ToolTip" Value="Show one deck at a time"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MaterialDesignSwitchToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource ButtonBorderColorBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColorBrush}" />
        <Setter Property="Padding" Value="0,1,0,0" />
        <Setter Property="ContentTemplate" Value="{DynamicResource IconToggleButtonTemplate}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <SineEase x:Key="RippleEasingFunction" EasingMode="EaseInOut" />
                        <Storyboard x:Key="ShowRipple">
                            <DoubleAnimation EasingFunction="{StaticResource RippleEasingFunction}"
                                             Storyboard.TargetName="RippleThumb"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0.26"
                                             Duration="0" />
                            <DoubleAnimation EasingFunction="{StaticResource RippleEasingFunction}"
                                             Storyboard.TargetName="RippleThumb"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                             From="1"
                                             To="2.5"
                                             Duration="0:0:0.2" />
                            <DoubleAnimation EasingFunction="{StaticResource RippleEasingFunction}"
                                             Storyboard.TargetName="RippleThumb"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                             From="1"
                                             To="2.5"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                        <Storyboard x:Key="HideRipple">
                            <DoubleAnimation EasingFunction="{StaticResource RippleEasingFunction}"
                                             Storyboard.TargetName="RippleThumb"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0"
                                             Duration="0:0:0.3" />
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Viewbox Width="{TemplateBinding Width}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="*" To="Checked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ThumbHolder" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="23.5">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <QuadraticEase EasingMode="EaseOut" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="Checked" To="Unchecked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ThumbHolder" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="23.5" />
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <QuadraticEase EasingMode="EaseOut" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ThumbHolder"
                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)"
                                     To="23.5"
                                     Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ThumbHolder"
                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)"
                                     To="0"
                                     Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid>
                            <Rectangle x:Name="Track"
                                       Width="40"
                                       Height="15"
                                       Margin="4.211,5,4.211,0"
                                       HorizontalAlignment="Left"
                                       VerticalAlignment="Top"
                                       Fill="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ToggleButtonAssist.SwitchTrackOffBackground)}"
                                       Opacity="0.26"
                                       RadiusX="7.5"
                                       RadiusY="7.5"
                                       Stroke="{x:Null}" />
                            <Grid x:Name="ThumbHolder"
                                  HorizontalAlignment="Left"
                                  VerticalAlignment="Top">
                                <Ellipse x:Name="RippleThumb"
                                         Width="25"
                                         Height="25"
                                         Margin="0"
                                         HorizontalAlignment="Center"
                                         VerticalAlignment="Center"
                                         Fill="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}"
                                         IsHitTestVisible="False"
                                         Opacity="0.26"
                                         RenderTransformOrigin="0.5,0.5">
                                    <Ellipse.RenderTransform>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                                <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(material:ShadowAssist.CacheMode)}">
                                    <Ellipse x:Name="Thumb" Width="25" Height="25" Margin="0,0,0,0"
                                             HorizontalAlignment="Center" VerticalAlignment="Center"
                                             Fill="#FFFAFAFA" RenderTransformOrigin="0.5,0.5"
                                             Stroke="{x:Null}">
                                        <Ellipse.Effect>
                                            <DropShadowEffect BlurRadius="5" Direction="270"
                                                              Opacity=".42" RenderingBias="Performance"
                                                              ShadowDepth="1" Color="{DynamicResource BackgroundDark}" />
                                        </Ellipse.Effect>
                                    </Ellipse>
                                </AdornerDecorator>
                                <ContentPresenter x:Name="ContentPresenter"
                                                  Margin="{TemplateBinding Padding}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Content="{TemplateBinding Content}"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                                  FlowDirection="LeftToRight" />
                                <Grid.RenderTransform>
                                    <TranslateTransform X="0" Y="0" />
                                </Grid.RenderTransform>
                            </Grid>
                        </Grid>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource BackgroundDarkBrush}" />
                            <Setter TargetName="Thumb" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" />
                            <Setter TargetName="Track" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ToggleButtonAssist.SwitchTrackOnBackground)}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="material:ToggleButtonAssist.HasOnContent" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentPresenter" Property="Content" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ToggleButtonAssist.OnContent)}" />
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ToggleButtonAssist.OnContentTemplate)}" />
                        </MultiTrigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource BackgroundDarkBrush}" />
                        </Trigger>
                        <Trigger Property="Button.IsDefaulted" Value="true" />
                        <Trigger Property="IsMouseOver" Value="true" />
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource ShowRipple}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HideRipple}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource BackdropColorBrush}" />
                            <Setter TargetName="Thumb" Property="Fill" Value="{DynamicResource DisabledColorBrush}" />
                            <Setter TargetName="Track" Property="Fill">
                                <Setter.Value>
                                    <SolidColorBrush Opacity=".45" Color="{DynamicResource ForegroundColor}" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="34" />
        <Setter Property="material:ToggleButtonAssist.SwitchTrackOffBackground" Value="{DynamicResource BackgroundDarkBrush}" />
        <Setter Property="material:ToggleButtonAssist.SwitchTrackOnBackground" Value="{DynamicResource BackgroundDarkBrush}" />
    </Style>

    <Style x:Key="TemplateSwitchToggleButton"
         TargetType="{x:Type ToggleButton}"
         BasedOn="{StaticResource MaterialDesignSwitchToggleButton}">
        <Setter Property="Background" Value="{DynamicResource TemplatingModeBrush}" />
        <Setter Property="Content" Value="{DynamicResource LayoutMode}"/>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Content" Value="{DynamicResource TemplateMode}"/>
                <Setter Property="Padding" Value="0,0,1,0"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LargeTemplateSwitchToggleButton" TargetType="{x:Type ToggleButton}"
           BasedOn="{StaticResource MaterialDesignSwitchToggleButton}">
        <Setter Property="Content" Value="{DynamicResource TemplateMode}"/>
        <Setter Property="Foreground" Value="{StaticResource TemplatingModeBrush}"/>
        <Setter Property="Background" Value="{StaticResource RemoveDeckButtonBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource RemoveDeckButtonBackgroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="grid">
                        <Border x:Name="border" CornerRadius="0,12,12,7" BorderThickness="1.5" 
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    Padding="{TemplateBinding Padding}">
                            <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          TextElement.FontWeight="Bold"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource DisabledColorBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="{StaticResource BackgroundDarkBrush}"/>
                <Setter Property="Background" Value="{StaticResource TemplatingModeBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource TemplatingModeBrush}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource AddDeckButtonBackgroundBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource TemplatingModeHoverBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource AddDeckButtonBackgroundBrush}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource TemplatingModeHoverBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource BackgroundColorBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource TemplatingModeHoverBrush}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsPressed" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource AddDeckButtonPressedBackgroundBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource TemplatingModePressedBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource AddDeckButtonPressedBackgroundBrush}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True"/>
                    <Condition Property="IsPressed" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource TemplatingModePressedBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource BackgroundDarkBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource TemplatingModePressedBrush}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsEnabled" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{StaticResource DisabledColorBrush}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True"/>
                    <Condition Property="IsEnabled" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource DisabledColorBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource DisabledColorBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource DisabledColorBrush}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="IconToggleButtonTemplate" DataType="{x:Type ToggleButton}">
        <Path Name="path" Stretch="Uniform" Width="16" Height="16"
              Fill="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=Foreground}"
              Data="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=Content, Converter={StaticResource StringToGeometryConverter}}"/>
    </DataTemplate>
</ResourceDictionary>